// Copyright (c) 2017-2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: com/digitalasset/canton/domain/admin/v2/mediator_initialization_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediatorInitializationServiceClient is the client API for MediatorInitializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediatorInitializationServiceClient interface {
	// Initialize a Mediator service
	// If the Mediator is uninitialized it should initialize itself with the provided configuration
	// If the Mediator is already initialized then verify the request is for the domain we're running against,
	// if correct then just return the current key otherwise fail.
	Initialize(ctx context.Context, in *InitializeMediatorRequest, opts ...grpc.CallOption) (*InitializeMediatorResponse, error)
}

type mediatorInitializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediatorInitializationServiceClient(cc grpc.ClientConnInterface) MediatorInitializationServiceClient {
	return &mediatorInitializationServiceClient{cc}
}

func (c *mediatorInitializationServiceClient) Initialize(ctx context.Context, in *InitializeMediatorRequest, opts ...grpc.CallOption) (*InitializeMediatorResponse, error) {
	out := new(InitializeMediatorResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v2.MediatorInitializationService/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediatorInitializationServiceServer is the server API for MediatorInitializationService service.
// All implementations must embed UnimplementedMediatorInitializationServiceServer
// for forward compatibility
type MediatorInitializationServiceServer interface {
	// Initialize a Mediator service
	// If the Mediator is uninitialized it should initialize itself with the provided configuration
	// If the Mediator is already initialized then verify the request is for the domain we're running against,
	// if correct then just return the current key otherwise fail.
	Initialize(context.Context, *InitializeMediatorRequest) (*InitializeMediatorResponse, error)
	mustEmbedUnimplementedMediatorInitializationServiceServer()
}

// UnimplementedMediatorInitializationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediatorInitializationServiceServer struct {
}

func (UnimplementedMediatorInitializationServiceServer) Initialize(context.Context, *InitializeMediatorRequest) (*InitializeMediatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedMediatorInitializationServiceServer) mustEmbedUnimplementedMediatorInitializationServiceServer() {
}

// UnsafeMediatorInitializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediatorInitializationServiceServer will
// result in compilation errors.
type UnsafeMediatorInitializationServiceServer interface {
	mustEmbedUnimplementedMediatorInitializationServiceServer()
}

func RegisterMediatorInitializationServiceServer(s grpc.ServiceRegistrar, srv MediatorInitializationServiceServer) {
	s.RegisterService(&MediatorInitializationService_ServiceDesc, srv)
}

func _MediatorInitializationService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeMediatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorInitializationServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v2.MediatorInitializationService/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorInitializationServiceServer).Initialize(ctx, req.(*InitializeMediatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediatorInitializationService_ServiceDesc is the grpc.ServiceDesc for MediatorInitializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediatorInitializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.domain.admin.v2.MediatorInitializationService",
	HandlerType: (*MediatorInitializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _MediatorInitializationService_Initialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/domain/admin/v2/mediator_initialization_service.proto",
}

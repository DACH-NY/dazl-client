// Copyright (c) 2017-2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: com/digitalasset/canton/domain/admin/v0/domain_service.proto

package v0

import (
	context "context"
	v0 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/protocol/v0"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DomainServiceClient is the client API for DomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainServiceClient interface {
	ListServiceAgreementAcceptances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceAgreementAcceptances, error)
	GetDomainParameters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v0.StaticDomainParameters, error)
	GetDomainParametersVersioned(ctx context.Context, in *GetDomainParameters_Request, opts ...grpc.CallOption) (*GetDomainParameters_Response, error)
}

type domainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainServiceClient(cc grpc.ClientConnInterface) DomainServiceClient {
	return &domainServiceClient{cc}
}

func (c *domainServiceClient) ListServiceAgreementAcceptances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceAgreementAcceptances, error) {
	out := new(ServiceAgreementAcceptances)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.DomainService/ListServiceAgreementAcceptances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) GetDomainParameters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v0.StaticDomainParameters, error) {
	out := new(v0.StaticDomainParameters)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.DomainService/GetDomainParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) GetDomainParametersVersioned(ctx context.Context, in *GetDomainParameters_Request, opts ...grpc.CallOption) (*GetDomainParameters_Response, error) {
	out := new(GetDomainParameters_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.DomainService/GetDomainParametersVersioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServiceServer is the server API for DomainService service.
// All implementations must embed UnimplementedDomainServiceServer
// for forward compatibility
type DomainServiceServer interface {
	ListServiceAgreementAcceptances(context.Context, *emptypb.Empty) (*ServiceAgreementAcceptances, error)
	GetDomainParameters(context.Context, *emptypb.Empty) (*v0.StaticDomainParameters, error)
	GetDomainParametersVersioned(context.Context, *GetDomainParameters_Request) (*GetDomainParameters_Response, error)
	mustEmbedUnimplementedDomainServiceServer()
}

// UnimplementedDomainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDomainServiceServer struct {
}

func (UnimplementedDomainServiceServer) ListServiceAgreementAcceptances(context.Context, *emptypb.Empty) (*ServiceAgreementAcceptances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceAgreementAcceptances not implemented")
}
func (UnimplementedDomainServiceServer) GetDomainParameters(context.Context, *emptypb.Empty) (*v0.StaticDomainParameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainParameters not implemented")
}
func (UnimplementedDomainServiceServer) GetDomainParametersVersioned(context.Context, *GetDomainParameters_Request) (*GetDomainParameters_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainParametersVersioned not implemented")
}
func (UnimplementedDomainServiceServer) mustEmbedUnimplementedDomainServiceServer() {}

// UnsafeDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainServiceServer will
// result in compilation errors.
type UnsafeDomainServiceServer interface {
	mustEmbedUnimplementedDomainServiceServer()
}

func RegisterDomainServiceServer(s grpc.ServiceRegistrar, srv DomainServiceServer) {
	s.RegisterService(&DomainService_ServiceDesc, srv)
}

func _DomainService_ListServiceAgreementAcceptances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).ListServiceAgreementAcceptances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.DomainService/ListServiceAgreementAcceptances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).ListServiceAgreementAcceptances(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_GetDomainParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).GetDomainParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.DomainService/GetDomainParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).GetDomainParameters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_GetDomainParametersVersioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainParameters_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).GetDomainParametersVersioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.DomainService/GetDomainParametersVersioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).GetDomainParametersVersioned(ctx, req.(*GetDomainParameters_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainService_ServiceDesc is the grpc.ServiceDesc for DomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.domain.admin.v0.DomainService",
	HandlerType: (*DomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServiceAgreementAcceptances",
			Handler:    _DomainService_ListServiceAgreementAcceptances_Handler,
		},
		{
			MethodName: "GetDomainParameters",
			Handler:    _DomainService_GetDomainParameters_Handler,
		},
		{
			MethodName: "GetDomainParametersVersioned",
			Handler:    _DomainService_GetDomainParametersVersioned_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/domain/admin/v0/domain_service.proto",
}

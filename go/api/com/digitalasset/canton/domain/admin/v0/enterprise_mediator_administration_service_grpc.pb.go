// Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: com/digitalasset/canton/domain/admin/v0/enterprise_mediator_administration_service.proto

package v0

import (
	context "context"
	v0 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/pruning/admin/v0"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnterpriseMediatorAdministrationServiceClient is the client API for EnterpriseMediatorAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterpriseMediatorAdministrationServiceClient interface {
	// Remove unnecessary data from the Mediator
	Prune(ctx context.Context, in *MediatorPruningRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Enable automatic pruning using the specified schedule parameters
	// The following errors may occur on the SetSchedule or Update commands:
	// - ``INVALID_ARGUMENT``: if a parameter is missing or an invalid cron expression
	//   or duration.
	// - ``FAILED_PRECONDITION``: if automatic background pruning has not been enabled
	//   or if invoked on a participant running the Community Edition.
	SetSchedule(ctx context.Context, in *v0.SetSchedule_Request, opts ...grpc.CallOption) (*v0.SetSchedule_Response, error)
	// Modify individual pruning schedule parameters.
	// - ``INVALID_ARGUMENT``: if the payload is malformed or no schedule is configured
	SetCron(ctx context.Context, in *v0.SetCron_Request, opts ...grpc.CallOption) (*v0.SetCron_Response, error)
	SetMaxDuration(ctx context.Context, in *v0.SetMaxDuration_Request, opts ...grpc.CallOption) (*v0.SetMaxDuration_Response, error)
	SetRetention(ctx context.Context, in *v0.SetRetention_Request, opts ...grpc.CallOption) (*v0.SetRetention_Response, error)
	// Disable automatic pruning and remove the persisted schedule configuration.
	ClearSchedule(ctx context.Context, in *v0.ClearSchedule_Request, opts ...grpc.CallOption) (*v0.ClearSchedule_Response, error)
	// Retrieve the automatic pruning configuration.
	GetSchedule(ctx context.Context, in *v0.GetSchedule_Request, opts ...grpc.CallOption) (*v0.GetSchedule_Response, error)
	// Retrieve pruning timestamp at or near the "beginning" of events.
	LocatePruningTimestamp(ctx context.Context, in *v0.LocatePruningTimestamp_Request, opts ...grpc.CallOption) (*v0.LocatePruningTimestamp_Response, error)
}

type enterpriseMediatorAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterpriseMediatorAdministrationServiceClient(cc grpc.ClientConnInterface) EnterpriseMediatorAdministrationServiceClient {
	return &enterpriseMediatorAdministrationServiceClient{cc}
}

func (c *enterpriseMediatorAdministrationServiceClient) Prune(ctx context.Context, in *MediatorPruningRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/Prune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) SetSchedule(ctx context.Context, in *v0.SetSchedule_Request, opts ...grpc.CallOption) (*v0.SetSchedule_Response, error) {
	out := new(v0.SetSchedule_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) SetCron(ctx context.Context, in *v0.SetCron_Request, opts ...grpc.CallOption) (*v0.SetCron_Response, error) {
	out := new(v0.SetCron_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) SetMaxDuration(ctx context.Context, in *v0.SetMaxDuration_Request, opts ...grpc.CallOption) (*v0.SetMaxDuration_Response, error) {
	out := new(v0.SetMaxDuration_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetMaxDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) SetRetention(ctx context.Context, in *v0.SetRetention_Request, opts ...grpc.CallOption) (*v0.SetRetention_Response, error) {
	out := new(v0.SetRetention_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetRetention", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) ClearSchedule(ctx context.Context, in *v0.ClearSchedule_Request, opts ...grpc.CallOption) (*v0.ClearSchedule_Response, error) {
	out := new(v0.ClearSchedule_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/ClearSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) GetSchedule(ctx context.Context, in *v0.GetSchedule_Request, opts ...grpc.CallOption) (*v0.GetSchedule_Response, error) {
	out := new(v0.GetSchedule_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/GetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterpriseMediatorAdministrationServiceClient) LocatePruningTimestamp(ctx context.Context, in *v0.LocatePruningTimestamp_Request, opts ...grpc.CallOption) (*v0.LocatePruningTimestamp_Response, error) {
	out := new(v0.LocatePruningTimestamp_Response)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/LocatePruningTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnterpriseMediatorAdministrationServiceServer is the server API for EnterpriseMediatorAdministrationService service.
// All implementations must embed UnimplementedEnterpriseMediatorAdministrationServiceServer
// for forward compatibility
type EnterpriseMediatorAdministrationServiceServer interface {
	// Remove unnecessary data from the Mediator
	Prune(context.Context, *MediatorPruningRequest) (*emptypb.Empty, error)
	// Enable automatic pruning using the specified schedule parameters
	// The following errors may occur on the SetSchedule or Update commands:
	// - ``INVALID_ARGUMENT``: if a parameter is missing or an invalid cron expression
	//   or duration.
	// - ``FAILED_PRECONDITION``: if automatic background pruning has not been enabled
	//   or if invoked on a participant running the Community Edition.
	SetSchedule(context.Context, *v0.SetSchedule_Request) (*v0.SetSchedule_Response, error)
	// Modify individual pruning schedule parameters.
	// - ``INVALID_ARGUMENT``: if the payload is malformed or no schedule is configured
	SetCron(context.Context, *v0.SetCron_Request) (*v0.SetCron_Response, error)
	SetMaxDuration(context.Context, *v0.SetMaxDuration_Request) (*v0.SetMaxDuration_Response, error)
	SetRetention(context.Context, *v0.SetRetention_Request) (*v0.SetRetention_Response, error)
	// Disable automatic pruning and remove the persisted schedule configuration.
	ClearSchedule(context.Context, *v0.ClearSchedule_Request) (*v0.ClearSchedule_Response, error)
	// Retrieve the automatic pruning configuration.
	GetSchedule(context.Context, *v0.GetSchedule_Request) (*v0.GetSchedule_Response, error)
	// Retrieve pruning timestamp at or near the "beginning" of events.
	LocatePruningTimestamp(context.Context, *v0.LocatePruningTimestamp_Request) (*v0.LocatePruningTimestamp_Response, error)
	mustEmbedUnimplementedEnterpriseMediatorAdministrationServiceServer()
}

// UnimplementedEnterpriseMediatorAdministrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnterpriseMediatorAdministrationServiceServer struct {
}

func (UnimplementedEnterpriseMediatorAdministrationServiceServer) Prune(context.Context, *MediatorPruningRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prune not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) SetSchedule(context.Context, *v0.SetSchedule_Request) (*v0.SetSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedule not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) SetCron(context.Context, *v0.SetCron_Request) (*v0.SetCron_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCron not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) SetMaxDuration(context.Context, *v0.SetMaxDuration_Request) (*v0.SetMaxDuration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxDuration not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) SetRetention(context.Context, *v0.SetRetention_Request) (*v0.SetRetention_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRetention not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) ClearSchedule(context.Context, *v0.ClearSchedule_Request) (*v0.ClearSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSchedule not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) GetSchedule(context.Context, *v0.GetSchedule_Request) (*v0.GetSchedule_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) LocatePruningTimestamp(context.Context, *v0.LocatePruningTimestamp_Request) (*v0.LocatePruningTimestamp_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocatePruningTimestamp not implemented")
}
func (UnimplementedEnterpriseMediatorAdministrationServiceServer) mustEmbedUnimplementedEnterpriseMediatorAdministrationServiceServer() {
}

// UnsafeEnterpriseMediatorAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterpriseMediatorAdministrationServiceServer will
// result in compilation errors.
type UnsafeEnterpriseMediatorAdministrationServiceServer interface {
	mustEmbedUnimplementedEnterpriseMediatorAdministrationServiceServer()
}

func RegisterEnterpriseMediatorAdministrationServiceServer(s grpc.ServiceRegistrar, srv EnterpriseMediatorAdministrationServiceServer) {
	s.RegisterService(&EnterpriseMediatorAdministrationService_ServiceDesc, srv)
}

func _EnterpriseMediatorAdministrationService_Prune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediatorPruningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).Prune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/Prune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).Prune(ctx, req.(*MediatorPruningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.SetSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetSchedule(ctx, req.(*v0.SetSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_SetCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.SetCron_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetCron(ctx, req.(*v0.SetCron_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_SetMaxDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.SetMaxDuration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetMaxDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetMaxDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetMaxDuration(ctx, req.(*v0.SetMaxDuration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_SetRetention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.SetRetention_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetRetention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/SetRetention",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).SetRetention(ctx, req.(*v0.SetRetention_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_ClearSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.ClearSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).ClearSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/ClearSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).ClearSchedule(ctx, req.(*v0.ClearSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.GetSchedule_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/GetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).GetSchedule(ctx, req.(*v0.GetSchedule_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterpriseMediatorAdministrationService_LocatePruningTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v0.LocatePruningTimestamp_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterpriseMediatorAdministrationServiceServer).LocatePruningTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService/LocatePruningTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterpriseMediatorAdministrationServiceServer).LocatePruningTimestamp(ctx, req.(*v0.LocatePruningTimestamp_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// EnterpriseMediatorAdministrationService_ServiceDesc is the grpc.ServiceDesc for EnterpriseMediatorAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterpriseMediatorAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.domain.admin.v0.EnterpriseMediatorAdministrationService",
	HandlerType: (*EnterpriseMediatorAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prune",
			Handler:    _EnterpriseMediatorAdministrationService_Prune_Handler,
		},
		{
			MethodName: "SetSchedule",
			Handler:    _EnterpriseMediatorAdministrationService_SetSchedule_Handler,
		},
		{
			MethodName: "SetCron",
			Handler:    _EnterpriseMediatorAdministrationService_SetCron_Handler,
		},
		{
			MethodName: "SetMaxDuration",
			Handler:    _EnterpriseMediatorAdministrationService_SetMaxDuration_Handler,
		},
		{
			MethodName: "SetRetention",
			Handler:    _EnterpriseMediatorAdministrationService_SetRetention_Handler,
		},
		{
			MethodName: "ClearSchedule",
			Handler:    _EnterpriseMediatorAdministrationService_ClearSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _EnterpriseMediatorAdministrationService_GetSchedule_Handler,
		},
		{
			MethodName: "LocatePruningTimestamp",
			Handler:    _EnterpriseMediatorAdministrationService_LocatePruningTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/domain/admin/v0/enterprise_mediator_administration_service.proto",
}

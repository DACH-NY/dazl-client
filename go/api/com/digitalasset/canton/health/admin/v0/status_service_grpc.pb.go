// Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: com/digitalasset/canton/health/admin/v0/status_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StatusService_Status_FullMethodName        = "/com.digitalasset.canton.health.admin.v0.StatusService/Status"
	StatusService_HealthDump_FullMethodName    = "/com.digitalasset.canton.health.admin.v0.StatusService/HealthDump"
	StatusService_SetLogLevel_FullMethodName   = "/com.digitalasset.canton.health.admin.v0.StatusService/SetLogLevel"
	StatusService_GetLastErrors_FullMethodName = "/com.digitalasset.canton.health.admin.v0.StatusService/GetLastErrors"
	StatusService_GetErrorTrace_FullMethodName = "/com.digitalasset.canton.health.admin.v0.StatusService/GetErrorTrace"
)

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusServiceClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeStatus, error)
	HealthDump(ctx context.Context, in *HealthDumpRequest, opts ...grpc.CallOption) (StatusService_HealthDumpClient, error)
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	GetLastErrors(ctx context.Context, in *GetLastErrorsRequest, opts ...grpc.CallOption) (*GetLastErrorsResponse, error)
	GetErrorTrace(ctx context.Context, in *GetLastErrorTraceRequest, opts ...grpc.CallOption) (*GetLastErrorTraceResponse, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NodeStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, StatusService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) HealthDump(ctx context.Context, in *HealthDumpRequest, opts ...grpc.CallOption) (StatusService_HealthDumpClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StatusService_ServiceDesc.Streams[0], StatusService_HealthDump_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &statusServiceHealthDumpClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StatusService_HealthDumpClient interface {
	Recv() (*HealthDumpChunk, error)
	grpc.ClientStream
}

type statusServiceHealthDumpClient struct {
	grpc.ClientStream
}

func (x *statusServiceHealthDumpClient) Recv() (*HealthDumpChunk, error) {
	m := new(HealthDumpChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statusServiceClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, StatusService_SetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) GetLastErrors(ctx context.Context, in *GetLastErrorsRequest, opts ...grpc.CallOption) (*GetLastErrorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastErrorsResponse)
	err := c.cc.Invoke(ctx, StatusService_GetLastErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) GetErrorTrace(ctx context.Context, in *GetLastErrorTraceRequest, opts ...grpc.CallOption) (*GetLastErrorTraceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastErrorTraceResponse)
	err := c.cc.Invoke(ctx, StatusService_GetErrorTrace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
// All implementations must embed UnimplementedStatusServiceServer
// for forward compatibility
type StatusServiceServer interface {
	Status(context.Context, *emptypb.Empty) (*NodeStatus, error)
	HealthDump(*HealthDumpRequest, StatusService_HealthDumpServer) error
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	GetLastErrors(context.Context, *GetLastErrorsRequest) (*GetLastErrorsResponse, error)
	GetErrorTrace(context.Context, *GetLastErrorTraceRequest) (*GetLastErrorTraceResponse, error)
	mustEmbedUnimplementedStatusServiceServer()
}

// UnimplementedStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (UnimplementedStatusServiceServer) Status(context.Context, *emptypb.Empty) (*NodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedStatusServiceServer) HealthDump(*HealthDumpRequest, StatusService_HealthDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthDump not implemented")
}
func (UnimplementedStatusServiceServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedStatusServiceServer) GetLastErrors(context.Context, *GetLastErrorsRequest) (*GetLastErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastErrors not implemented")
}
func (UnimplementedStatusServiceServer) GetErrorTrace(context.Context, *GetLastErrorTraceRequest) (*GetLastErrorTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorTrace not implemented")
}
func (UnimplementedStatusServiceServer) mustEmbedUnimplementedStatusServiceServer() {}

// UnsafeStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServiceServer will
// result in compilation errors.
type UnsafeStatusServiceServer interface {
	mustEmbedUnimplementedStatusServiceServer()
}

func RegisterStatusServiceServer(s grpc.ServiceRegistrar, srv StatusServiceServer) {
	s.RegisterService(&StatusService_ServiceDesc, srv)
}

func _StatusService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_HealthDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthDumpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServiceServer).HealthDump(m, &statusServiceHealthDumpServer{ServerStream: stream})
}

type StatusService_HealthDumpServer interface {
	Send(*HealthDumpChunk) error
	grpc.ServerStream
}

type statusServiceHealthDumpServer struct {
	grpc.ServerStream
}

func (x *statusServiceHealthDumpServer) Send(m *HealthDumpChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _StatusService_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_SetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_GetLastErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetLastErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_GetLastErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetLastErrors(ctx, req.(*GetLastErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_GetErrorTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastErrorTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetErrorTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_GetErrorTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetErrorTrace(ctx, req.(*GetLastErrorTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusService_ServiceDesc is the grpc.ServiceDesc for StatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.health.admin.v0.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _StatusService_Status_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _StatusService_SetLogLevel_Handler,
		},
		{
			MethodName: "GetLastErrors",
			Handler:    _StatusService_GetLastErrors_Handler,
		},
		{
			MethodName: "GetErrorTrace",
			Handler:    _StatusService_GetErrorTrace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthDump",
			Handler:       _StatusService_HealthDump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/canton/health/admin/v0/status_service.proto",
}

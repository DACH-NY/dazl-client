// Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: com/digitalasset/canton/connection/v30/api_info.proto

package v30

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiInfoServiceClient is the client API for ApiInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiInfoServiceClient interface {
	GetApiInfo(ctx context.Context, in *GetApiInfoRequest, opts ...grpc.CallOption) (*GetApiInfoResponse, error)
}

type apiInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiInfoServiceClient(cc grpc.ClientConnInterface) ApiInfoServiceClient {
	return &apiInfoServiceClient{cc}
}

func (c *apiInfoServiceClient) GetApiInfo(ctx context.Context, in *GetApiInfoRequest, opts ...grpc.CallOption) (*GetApiInfoResponse, error) {
	out := new(GetApiInfoResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.connection.v30.ApiInfoService/GetApiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiInfoServiceServer is the server API for ApiInfoService service.
// All implementations must embed UnimplementedApiInfoServiceServer
// for forward compatibility
type ApiInfoServiceServer interface {
	GetApiInfo(context.Context, *GetApiInfoRequest) (*GetApiInfoResponse, error)
	mustEmbedUnimplementedApiInfoServiceServer()
}

// UnimplementedApiInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiInfoServiceServer struct {
}

func (UnimplementedApiInfoServiceServer) GetApiInfo(context.Context, *GetApiInfoRequest) (*GetApiInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiInfo not implemented")
}
func (UnimplementedApiInfoServiceServer) mustEmbedUnimplementedApiInfoServiceServer() {}

// UnsafeApiInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiInfoServiceServer will
// result in compilation errors.
type UnsafeApiInfoServiceServer interface {
	mustEmbedUnimplementedApiInfoServiceServer()
}

func RegisterApiInfoServiceServer(s grpc.ServiceRegistrar, srv ApiInfoServiceServer) {
	s.RegisterService(&ApiInfoService_ServiceDesc, srv)
}

func _ApiInfoService_GetApiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiInfoServiceServer).GetApiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.connection.v30.ApiInfoService/GetApiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiInfoServiceServer).GetApiInfo(ctx, req.(*GetApiInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiInfoService_ServiceDesc is the grpc.ServiceDesc for ApiInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.connection.v30.ApiInfoService",
	HandlerType: (*ApiInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApiInfo",
			Handler:    _ApiInfoService_GetApiInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/connection/v30/api_info.proto",
}

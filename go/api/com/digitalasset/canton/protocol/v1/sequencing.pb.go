// Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.3
// source: com/digitalasset/canton/protocol/v1/sequencing.proto

package v1

import (
	v0 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/crypto/v0"
	v01 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/protocol/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StaticDomainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueContractKeys           bool                     `protobuf:"varint,1,opt,name=unique_contract_keys,json=uniqueContractKeys,proto3" json:"unique_contract_keys,omitempty"`
	RequiredSigningKeySchemes    []v0.SigningKeyScheme    `protobuf:"varint,2,rep,packed,name=required_signing_key_schemes,json=requiredSigningKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v0.SigningKeyScheme" json:"required_signing_key_schemes,omitempty"`
	RequiredEncryptionKeySchemes []v0.EncryptionKeyScheme `protobuf:"varint,3,rep,packed,name=required_encryption_key_schemes,json=requiredEncryptionKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v0.EncryptionKeyScheme" json:"required_encryption_key_schemes,omitempty"`
	RequiredSymmetricKeySchemes  []v0.SymmetricKeyScheme  `protobuf:"varint,4,rep,packed,name=required_symmetric_key_schemes,json=requiredSymmetricKeySchemes,proto3,enum=com.digitalasset.canton.crypto.v0.SymmetricKeyScheme" json:"required_symmetric_key_schemes,omitempty"`
	RequiredHashAlgorithms       []v0.HashAlgorithm       `protobuf:"varint,5,rep,packed,name=required_hash_algorithms,json=requiredHashAlgorithms,proto3,enum=com.digitalasset.canton.crypto.v0.HashAlgorithm" json:"required_hash_algorithms,omitempty"`
	RequiredCryptoKeyFormats     []v0.CryptoKeyFormat     `protobuf:"varint,6,rep,packed,name=required_crypto_key_formats,json=requiredCryptoKeyFormats,proto3,enum=com.digitalasset.canton.crypto.v0.CryptoKeyFormat" json:"required_crypto_key_formats,omitempty"`
	ProtocolVersion              int32                    `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *StaticDomainParameters) Reset() {
	*x = StaticDomainParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticDomainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticDomainParameters) ProtoMessage() {}

func (x *StaticDomainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticDomainParameters.ProtoReflect.Descriptor instead.
func (*StaticDomainParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{0}
}

func (x *StaticDomainParameters) GetUniqueContractKeys() bool {
	if x != nil {
		return x.UniqueContractKeys
	}
	return false
}

func (x *StaticDomainParameters) GetRequiredSigningKeySchemes() []v0.SigningKeyScheme {
	if x != nil {
		return x.RequiredSigningKeySchemes
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredEncryptionKeySchemes() []v0.EncryptionKeyScheme {
	if x != nil {
		return x.RequiredEncryptionKeySchemes
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredSymmetricKeySchemes() []v0.SymmetricKeyScheme {
	if x != nil {
		return x.RequiredSymmetricKeySchemes
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredHashAlgorithms() []v0.HashAlgorithm {
	if x != nil {
		return x.RequiredHashAlgorithms
	}
	return nil
}

func (x *StaticDomainParameters) GetRequiredCryptoKeyFormats() []v0.CryptoKeyFormat {
	if x != nil {
		return x.RequiredCryptoKeyFormats
	}
	return nil
}

func (x *StaticDomainParameters) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type DynamicDomainParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantResponseTimeout    *durationpb.Duration `protobuf:"bytes,1,opt,name=participant_response_timeout,json=participantResponseTimeout,proto3" json:"participant_response_timeout,omitempty"`
	MediatorReactionTimeout       *durationpb.Duration `protobuf:"bytes,2,opt,name=mediator_reaction_timeout,json=mediatorReactionTimeout,proto3" json:"mediator_reaction_timeout,omitempty"`
	TransferExclusivityTimeout    *durationpb.Duration `protobuf:"bytes,3,opt,name=transfer_exclusivity_timeout,json=transferExclusivityTimeout,proto3" json:"transfer_exclusivity_timeout,omitempty"`
	TopologyChangeDelay           *durationpb.Duration `protobuf:"bytes,4,opt,name=topology_change_delay,json=topologyChangeDelay,proto3" json:"topology_change_delay,omitempty"`
	LedgerTimeRecordTimeTolerance *durationpb.Duration `protobuf:"bytes,5,opt,name=ledger_time_record_time_tolerance,json=ledgerTimeRecordTimeTolerance,proto3" json:"ledger_time_record_time_tolerance,omitempty"`
	ReconciliationInterval        *durationpb.Duration `protobuf:"bytes,6,opt,name=reconciliation_interval,json=reconciliationInterval,proto3" json:"reconciliation_interval,omitempty"`
	MediatorDeduplicationTimeout  *durationpb.Duration `protobuf:"bytes,7,opt,name=mediator_deduplication_timeout,json=mediatorDeduplicationTimeout,proto3" json:"mediator_deduplication_timeout,omitempty"`
	MaxRatePerParticipant         uint32               `protobuf:"varint,8,opt,name=max_rate_per_participant,json=maxRatePerParticipant,proto3" json:"max_rate_per_participant,omitempty"`
	MaxRequestSize                uint32               `protobuf:"varint,9,opt,name=max_request_size,json=maxRequestSize,proto3" json:"max_request_size,omitempty"`
}

func (x *DynamicDomainParameters) Reset() {
	*x = DynamicDomainParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicDomainParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicDomainParameters) ProtoMessage() {}

func (x *DynamicDomainParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicDomainParameters.ProtoReflect.Descriptor instead.
func (*DynamicDomainParameters) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{1}
}

func (x *DynamicDomainParameters) GetParticipantResponseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ParticipantResponseTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetMediatorReactionTimeout() *durationpb.Duration {
	if x != nil {
		return x.MediatorReactionTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTransferExclusivityTimeout() *durationpb.Duration {
	if x != nil {
		return x.TransferExclusivityTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetTopologyChangeDelay() *durationpb.Duration {
	if x != nil {
		return x.TopologyChangeDelay
	}
	return nil
}

func (x *DynamicDomainParameters) GetLedgerTimeRecordTimeTolerance() *durationpb.Duration {
	if x != nil {
		return x.LedgerTimeRecordTimeTolerance
	}
	return nil
}

func (x *DynamicDomainParameters) GetReconciliationInterval() *durationpb.Duration {
	if x != nil {
		return x.ReconciliationInterval
	}
	return nil
}

func (x *DynamicDomainParameters) GetMediatorDeduplicationTimeout() *durationpb.Duration {
	if x != nil {
		return x.MediatorDeduplicationTimeout
	}
	return nil
}

func (x *DynamicDomainParameters) GetMaxRatePerParticipant() uint32 {
	if x != nil {
		return x.MaxRatePerParticipant
	}
	return 0
}

func (x *DynamicDomainParameters) GetMaxRequestSize() uint32 {
	if x != nil {
		return x.MaxRequestSize
	}
	return 0
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains a v2.EnvelopeContent if signatures are empty and a v0.TypedSignedProtocolMessageContent otherwise
	Content    []byte          `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Recipients *v01.Recipients `protobuf:"bytes,2,opt,name=recipients,proto3" json:"recipients,omitempty"`
	// Added in v1
	Signatures []*v0.Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{2}
}

func (x *Envelope) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Envelope) GetRecipients() *v01.Recipients {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Envelope) GetSignatures() []*v0.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changed from v0.Envelope to v1.Envelope
	Envelopes []*Envelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{3}
}

func (x *Batch) GetEnvelopes() []*Envelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type CompressedBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm v01.CompressedBatch_CompressionAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=com.digitalasset.canton.protocol.v0.CompressedBatch_CompressionAlgorithm" json:"algorithm,omitempty"`
	// contains possibly compressed v1.Batch instead of v0.Batch in v0
	CompressedBatch []byte `protobuf:"bytes,2,opt,name=compressed_batch,json=compressedBatch,proto3" json:"compressed_batch,omitempty"`
}

func (x *CompressedBatch) Reset() {
	*x = CompressedBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressedBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressedBatch) ProtoMessage() {}

func (x *CompressedBatch) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressedBatch.ProtoReflect.Descriptor instead.
func (*CompressedBatch) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{4}
}

func (x *CompressedBatch) GetAlgorithm() v01.CompressedBatch_CompressionAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return v01.CompressedBatch_CompressionAlgorithm(0)
}

func (x *CompressedBatch) GetCompressedBatch() []byte {
	if x != nil {
		return x.CompressedBatch
	}
	return nil
}

type SequencedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter   int64                   `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	Timestamp *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DomainId  string                  `protobuf:"bytes,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	MessageId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // Optional: Present for DeliverError, present for the sender of a Deliver.
	// Changed in v1 from v0.CompressedBatch to v1.CompressedBatch
	Batch              *CompressedBatch        `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`                                                       // Optional: Present for Deliver, absent for DeliverError
	DeliverErrorReason *v01.DeliverErrorReason `protobuf:"bytes,6,opt,name=deliver_error_reason,json=deliverErrorReason,proto3" json:"deliver_error_reason,omitempty"` // Optional: Present for DeliverError, absent for other events
}

func (x *SequencedEvent) Reset() {
	*x = SequencedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequencedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencedEvent) ProtoMessage() {}

func (x *SequencedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencedEvent.ProtoReflect.Descriptor instead.
func (*SequencedEvent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{5}
}

func (x *SequencedEvent) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *SequencedEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SequencedEvent) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *SequencedEvent) GetMessageId() *wrapperspb.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *SequencedEvent) GetBatch() *CompressedBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SequencedEvent) GetDeliverErrorReason() *v01.DeliverErrorReason {
	if x != nil {
		return x.DeliverErrorReason
	}
	return nil
}

type SignedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// now repeated, was not repeated in v0
	Signatures            []*v0.Signature        `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	TimestampOfSigningKey *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp_of_signing_key,json=timestampOfSigningKey,proto3" json:"timestamp_of_signing_key,omitempty"`
}

func (x *SignedContent) Reset() {
	*x = SignedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedContent) ProtoMessage() {}

func (x *SignedContent) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedContent.ProtoReflect.Descriptor instead.
func (*SignedContent) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{6}
}

func (x *SignedContent) GetContent() *wrapperspb.BytesValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SignedContent) GetSignatures() []*v0.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedContent) GetTimestampOfSigningKey() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampOfSigningKey
	}
	return nil
}

// Messages used for synchronization between sequencer nodes
type SubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	IsRequest bool   `protobuf:"varint,3,opt,name=is_request,json=isRequest,proto3" json:"is_request,omitempty"`
	// Changed from v0.CompressedBatch to v1.CompressedBatch
	Batch                 *CompressedBatch       `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
	MaxSequencingTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=max_sequencing_time,json=maxSequencingTime,proto3" json:"max_sequencing_time,omitempty"`
	TimestampOfSigningKey *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp_of_signing_key,json=timestampOfSigningKey,proto3" json:"timestamp_of_signing_key,omitempty"`
	AggregationRule       *v01.AggregationRule   `protobuf:"bytes,7,opt,name=aggregation_rule,json=aggregationRule,proto3" json:"aggregation_rule,omitempty"` // optional
}

func (x *SubmissionRequest) Reset() {
	*x = SubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionRequest) ProtoMessage() {}

func (x *SubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionRequest.ProtoReflect.Descriptor instead.
func (*SubmissionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP(), []int{7}
}

func (x *SubmissionRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *SubmissionRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SubmissionRequest) GetIsRequest() bool {
	if x != nil {
		return x.IsRequest
	}
	return false
}

func (x *SubmissionRequest) GetBatch() *CompressedBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *SubmissionRequest) GetMaxSequencingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxSequencingTime
	}
	return nil
}

func (x *SubmissionRequest) GetTimestampOfSigningKey() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampOfSigningKey
	}
	return nil
}

func (x *SubmissionRequest) GetAggregationRule() *v01.AggregationRule {
	if x != nil {
		return x.AggregationRule
	}
	return nil
}

var File_com_digitalasset_canton_protocol_v1_sequencing_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30,
	0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc5, 0x05, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x74, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x76, 0x30, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x12, 0x6a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x71, 0x0a, 0x1b,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf6, 0x05, 0x0a, 0x17, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x63, 0x0a, 0x21, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x5f, 0x0a, 0x1e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x05, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x4b, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x67, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0xf5, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x69, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x12, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xe9, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f,
	0x66, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0xb7, 0x03, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x37,
	0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescData = file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_com_digitalasset_canton_protocol_v1_sequencing_proto_goTypes = []interface{}{
	(*StaticDomainParameters)(nil),                // 0: com.digitalasset.canton.protocol.v1.StaticDomainParameters
	(*DynamicDomainParameters)(nil),               // 1: com.digitalasset.canton.protocol.v1.DynamicDomainParameters
	(*Envelope)(nil),                              // 2: com.digitalasset.canton.protocol.v1.Envelope
	(*Batch)(nil),                                 // 3: com.digitalasset.canton.protocol.v1.Batch
	(*CompressedBatch)(nil),                       // 4: com.digitalasset.canton.protocol.v1.CompressedBatch
	(*SequencedEvent)(nil),                        // 5: com.digitalasset.canton.protocol.v1.SequencedEvent
	(*SignedContent)(nil),                         // 6: com.digitalasset.canton.protocol.v1.SignedContent
	(*SubmissionRequest)(nil),                     // 7: com.digitalasset.canton.protocol.v1.SubmissionRequest
	(v0.SigningKeyScheme)(0),                      // 8: com.digitalasset.canton.crypto.v0.SigningKeyScheme
	(v0.EncryptionKeyScheme)(0),                   // 9: com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	(v0.SymmetricKeyScheme)(0),                    // 10: com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	(v0.HashAlgorithm)(0),                         // 11: com.digitalasset.canton.crypto.v0.HashAlgorithm
	(v0.CryptoKeyFormat)(0),                       // 12: com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	(*durationpb.Duration)(nil),                   // 13: google.protobuf.Duration
	(*v01.Recipients)(nil),                        // 14: com.digitalasset.canton.protocol.v0.Recipients
	(*v0.Signature)(nil),                          // 15: com.digitalasset.canton.crypto.v0.Signature
	(v01.CompressedBatch_CompressionAlgorithm)(0), // 16: com.digitalasset.canton.protocol.v0.CompressedBatch.CompressionAlgorithm
	(*timestamppb.Timestamp)(nil),                 // 17: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),                // 18: google.protobuf.StringValue
	(*v01.DeliverErrorReason)(nil),                // 19: com.digitalasset.canton.protocol.v0.DeliverErrorReason
	(*wrapperspb.BytesValue)(nil),                 // 20: google.protobuf.BytesValue
	(*v01.AggregationRule)(nil),                   // 21: com.digitalasset.canton.protocol.v0.AggregationRule
}
var file_com_digitalasset_canton_protocol_v1_sequencing_proto_depIdxs = []int32{
	8,  // 0: com.digitalasset.canton.protocol.v1.StaticDomainParameters.required_signing_key_schemes:type_name -> com.digitalasset.canton.crypto.v0.SigningKeyScheme
	9,  // 1: com.digitalasset.canton.protocol.v1.StaticDomainParameters.required_encryption_key_schemes:type_name -> com.digitalasset.canton.crypto.v0.EncryptionKeyScheme
	10, // 2: com.digitalasset.canton.protocol.v1.StaticDomainParameters.required_symmetric_key_schemes:type_name -> com.digitalasset.canton.crypto.v0.SymmetricKeyScheme
	11, // 3: com.digitalasset.canton.protocol.v1.StaticDomainParameters.required_hash_algorithms:type_name -> com.digitalasset.canton.crypto.v0.HashAlgorithm
	12, // 4: com.digitalasset.canton.protocol.v1.StaticDomainParameters.required_crypto_key_formats:type_name -> com.digitalasset.canton.crypto.v0.CryptoKeyFormat
	13, // 5: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.participant_response_timeout:type_name -> google.protobuf.Duration
	13, // 6: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.mediator_reaction_timeout:type_name -> google.protobuf.Duration
	13, // 7: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.transfer_exclusivity_timeout:type_name -> google.protobuf.Duration
	13, // 8: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.topology_change_delay:type_name -> google.protobuf.Duration
	13, // 9: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.ledger_time_record_time_tolerance:type_name -> google.protobuf.Duration
	13, // 10: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.reconciliation_interval:type_name -> google.protobuf.Duration
	13, // 11: com.digitalasset.canton.protocol.v1.DynamicDomainParameters.mediator_deduplication_timeout:type_name -> google.protobuf.Duration
	14, // 12: com.digitalasset.canton.protocol.v1.Envelope.recipients:type_name -> com.digitalasset.canton.protocol.v0.Recipients
	15, // 13: com.digitalasset.canton.protocol.v1.Envelope.signatures:type_name -> com.digitalasset.canton.crypto.v0.Signature
	2,  // 14: com.digitalasset.canton.protocol.v1.Batch.envelopes:type_name -> com.digitalasset.canton.protocol.v1.Envelope
	16, // 15: com.digitalasset.canton.protocol.v1.CompressedBatch.algorithm:type_name -> com.digitalasset.canton.protocol.v0.CompressedBatch.CompressionAlgorithm
	17, // 16: com.digitalasset.canton.protocol.v1.SequencedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 17: com.digitalasset.canton.protocol.v1.SequencedEvent.message_id:type_name -> google.protobuf.StringValue
	4,  // 18: com.digitalasset.canton.protocol.v1.SequencedEvent.batch:type_name -> com.digitalasset.canton.protocol.v1.CompressedBatch
	19, // 19: com.digitalasset.canton.protocol.v1.SequencedEvent.deliver_error_reason:type_name -> com.digitalasset.canton.protocol.v0.DeliverErrorReason
	20, // 20: com.digitalasset.canton.protocol.v1.SignedContent.content:type_name -> google.protobuf.BytesValue
	15, // 21: com.digitalasset.canton.protocol.v1.SignedContent.signatures:type_name -> com.digitalasset.canton.crypto.v0.Signature
	17, // 22: com.digitalasset.canton.protocol.v1.SignedContent.timestamp_of_signing_key:type_name -> google.protobuf.Timestamp
	4,  // 23: com.digitalasset.canton.protocol.v1.SubmissionRequest.batch:type_name -> com.digitalasset.canton.protocol.v1.CompressedBatch
	17, // 24: com.digitalasset.canton.protocol.v1.SubmissionRequest.max_sequencing_time:type_name -> google.protobuf.Timestamp
	17, // 25: com.digitalasset.canton.protocol.v1.SubmissionRequest.timestamp_of_signing_key:type_name -> google.protobuf.Timestamp
	21, // 26: com.digitalasset.canton.protocol.v1.SubmissionRequest.aggregation_rule:type_name -> com.digitalasset.canton.protocol.v0.AggregationRule
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v1_sequencing_proto_init() }
func file_com_digitalasset_canton_protocol_v1_sequencing_proto_init() {
	if File_com_digitalasset_canton_protocol_v1_sequencing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticDomainParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicDomainParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressedBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequencedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v1_sequencing_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v1_sequencing_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_protocol_v1_sequencing_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v1_sequencing_proto = out.File
	file_com_digitalasset_canton_protocol_v1_sequencing_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v1_sequencing_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v1_sequencing_proto_depIdxs = nil
}

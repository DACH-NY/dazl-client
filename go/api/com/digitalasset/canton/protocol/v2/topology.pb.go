// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.3
// source: com/digitalasset/canton/protocol/v2/topology.proto

package v2

import (
	v0 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/crypto/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopologyChangeOpX int32

const (
	// TODO(#11255) should that be REPLACE instead of Replace?
	// Adds a new or replaces an existing mapping
	TopologyChangeOpX_Replace TopologyChangeOpX = 0
	// Remove an existing mapping
	TopologyChangeOpX_Remove TopologyChangeOpX = 1
)

// Enum value maps for TopologyChangeOpX.
var (
	TopologyChangeOpX_name = map[int32]string{
		0: "Replace",
		1: "Remove",
	}
	TopologyChangeOpX_value = map[string]int32{
		"Replace": 0,
		"Remove":  1,
	}
)

func (x TopologyChangeOpX) Enum() *TopologyChangeOpX {
	p := new(TopologyChangeOpX)
	*p = x
	return p
}

func (x TopologyChangeOpX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyChangeOpX) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[0].Descriptor()
}

func (TopologyChangeOpX) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[0]
}

func (x TopologyChangeOpX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyChangeOpX.Descriptor instead.
func (TopologyChangeOpX) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{0}
}

type TrustLevelX int32

const (
	TrustLevelX_MissingTrustLevel TrustLevelX = 0
	TrustLevelX_Ordinary          TrustLevelX = 1
	TrustLevelX_Vip               TrustLevelX = 2
)

// Enum value maps for TrustLevelX.
var (
	TrustLevelX_name = map[int32]string{
		0: "MissingTrustLevel",
		1: "Ordinary",
		2: "Vip",
	}
	TrustLevelX_value = map[string]int32{
		"MissingTrustLevel": 0,
		"Ordinary":          1,
		"Vip":               2,
	}
)

func (x TrustLevelX) Enum() *TrustLevelX {
	p := new(TrustLevelX)
	*p = x
	return p
}

func (x TrustLevelX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrustLevelX) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[1].Descriptor()
}

func (TrustLevelX) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[1]
}

func (x TrustLevelX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrustLevelX.Descriptor instead.
func (TrustLevelX) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{1}
}

// enum indicating the participant permission level
type ParticipantPermissionX int32

const (
	ParticipantPermissionX_MissingParticipantPermission ParticipantPermissionX = 0
	// participant is active, can submit transactions
	ParticipantPermissionX_Submission ParticipantPermissionX = 1
	// participant is passive, can only confirm transactions
	ParticipantPermissionX_Confirmation ParticipantPermissionX = 2
	// participant is passive, can only observe transactions
	ParticipantPermissionX_Observation ParticipantPermissionX = 3
)

// Enum value maps for ParticipantPermissionX.
var (
	ParticipantPermissionX_name = map[int32]string{
		0: "MissingParticipantPermission",
		1: "Submission",
		2: "Confirmation",
		3: "Observation",
	}
	ParticipantPermissionX_value = map[string]int32{
		"MissingParticipantPermission": 0,
		"Submission":                   1,
		"Confirmation":                 2,
		"Observation":                  3,
	}
)

func (x ParticipantPermissionX) Enum() *ParticipantPermissionX {
	p := new(ParticipantPermissionX)
	*p = x
	return p
}

func (x ParticipantPermissionX) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantPermissionX) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[2].Descriptor()
}

func (ParticipantPermissionX) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[2]
}

func (x ParticipantPermissionX) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantPermissionX.Descriptor instead.
func (ParticipantPermissionX) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{2}
}

type RegisterTopologyTransactionResponseX_Result_State int32

const (
	RegisterTopologyTransactionResponseX_Result_MISSING_STATE RegisterTopologyTransactionResponseX_Result_State = 0
	// the request failed with an error message
	RegisterTopologyTransactionResponseX_Result_FAILED RegisterTopologyTransactionResponseX_Result_State = 1
	// the request has been rejected as it does not conform with the domain settings
	RegisterTopologyTransactionResponseX_Result_REJECTED RegisterTopologyTransactionResponseX_Result_State = 2
	// the request has been accepted by the domain topology manager
	RegisterTopologyTransactionResponseX_Result_ACCEPTED RegisterTopologyTransactionResponseX_Result_State = 3
	// the request is a duplicate (i.e. yields an topology state element that already exists)
	RegisterTopologyTransactionResponseX_Result_DUPLICATE RegisterTopologyTransactionResponseX_Result_State = 4
	// the request is obsolete (i.e. a Remove to a topology mapping that does not exist on the server)
	RegisterTopologyTransactionResponseX_Result_OBSOLETE RegisterTopologyTransactionResponseX_Result_State = 5
)

// Enum value maps for RegisterTopologyTransactionResponseX_Result_State.
var (
	RegisterTopologyTransactionResponseX_Result_State_name = map[int32]string{
		0: "MISSING_STATE",
		1: "FAILED",
		2: "REJECTED",
		3: "ACCEPTED",
		4: "DUPLICATE",
		5: "OBSOLETE",
	}
	RegisterTopologyTransactionResponseX_Result_State_value = map[string]int32{
		"MISSING_STATE": 0,
		"FAILED":        1,
		"REJECTED":      2,
		"ACCEPTED":      3,
		"DUPLICATE":     4,
		"OBSOLETE":      5,
	}
)

func (x RegisterTopologyTransactionResponseX_Result_State) Enum() *RegisterTopologyTransactionResponseX_Result_State {
	p := new(RegisterTopologyTransactionResponseX_Result_State)
	*p = x
	return p
}

func (x RegisterTopologyTransactionResponseX_Result_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterTopologyTransactionResponseX_Result_State) Descriptor() protoreflect.EnumDescriptor {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[3].Descriptor()
}

func (RegisterTopologyTransactionResponseX_Result_State) Type() protoreflect.EnumType {
	return &file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes[3]
}

func (x RegisterTopologyTransactionResponseX_Result_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterTopologyTransactionResponseX_Result_State.Descriptor instead.
func (RegisterTopologyTransactionResponseX_Result_State) EnumDescriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{20, 0, 0}
}

// namespace delegation (equivalent to X509v3 CA root or intermediate CAs)
// authorization: a namespace delegation is either signed by the root key, or is signed by
//   a key for which there exists a series of properly authorized namespace delegations
//   that are ultimately signed by the root key
// UNIQUE(namespace, target_key)
type NamespaceDelegationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fingerprint of the root key defining the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// target key of getting full rights on the namespace (if target == namespace, it's a root CA)
	TargetKey *v0.SigningPublicKey `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	// flag indicating whether the given delegation is a root delegation or not
	// a root delegation is also allowed to issue other NamespaceDelegations.
	IsRootDelegation bool `protobuf:"varint,3,opt,name=is_root_delegation,json=isRootDelegation,proto3" json:"is_root_delegation,omitempty"`
}

func (x *NamespaceDelegationX) Reset() {
	*x = NamespaceDelegationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceDelegationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceDelegationX) ProtoMessage() {}

func (x *NamespaceDelegationX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceDelegationX.ProtoReflect.Descriptor instead.
func (*NamespaceDelegationX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{0}
}

func (x *NamespaceDelegationX) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespaceDelegationX) GetTargetKey() *v0.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

func (x *NamespaceDelegationX) GetIsRootDelegation() bool {
	if x != nil {
		return x.IsRootDelegation
	}
	return false
}

// a unionspace definition that creates a new namespace supported by the
// the original owners
// authorization: the unionspace definition with serial = 1 must be authorized by all the
//   owners of the namespace that form the unionspace.
//   for definitions with serial > 1, we need the authorization of #threshold owners plus
//   all new owners
//
//   any further transaction within the unionspace other than unionspace definitions needs
//   #threshold signatures of the owners
//
// UNIQUE(unionspace)
type UnionspaceDefinitionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the unionspace, computed from the hash of its initial owners
	Unionspace string `protobuf:"bytes,1,opt,name=unionspace,proto3" json:"unionspace,omitempty"`
	// the threshold required for any subsequent update signing
	Threshold int32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// the namespaces of the owners
	Owners []string `protobuf:"bytes,3,rep,name=owners,proto3" json:"owners,omitempty"`
}

func (x *UnionspaceDefinitionX) Reset() {
	*x = UnionspaceDefinitionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionspaceDefinitionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionspaceDefinitionX) ProtoMessage() {}

func (x *UnionspaceDefinitionX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionspaceDefinitionX.ProtoReflect.Descriptor instead.
func (*UnionspaceDefinitionX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{1}
}

func (x *UnionspaceDefinitionX) GetUnionspace() string {
	if x != nil {
		return x.Unionspace
	}
	return ""
}

func (x *UnionspaceDefinitionX) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *UnionspaceDefinitionX) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

// identifier delegation giving right to issue topology transaction on that particular identifier
// authorization: must have sufficient signatures by keys of the namespace of the given unique
//   identifier. if the identifier is for a consortium, it can mean that we need multiple signatures
// UNIQUE (all fields)
type IdentifierDelegationX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier
	UniqueIdentifier string `protobuf:"bytes,1,opt,name=unique_identifier,json=uniqueIdentifier,proto3" json:"unique_identifier,omitempty"`
	// target key getting the right
	TargetKey *v0.SigningPublicKey `protobuf:"bytes,2,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
}

func (x *IdentifierDelegationX) Reset() {
	*x = IdentifierDelegationX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierDelegationX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierDelegationX) ProtoMessage() {}

func (x *IdentifierDelegationX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierDelegationX.ProtoReflect.Descriptor instead.
func (*IdentifierDelegationX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{2}
}

func (x *IdentifierDelegationX) GetUniqueIdentifier() string {
	if x != nil {
		return x.UniqueIdentifier
	}
	return ""
}

func (x *IdentifierDelegationX) GetTargetKey() *v0.SigningPublicKey {
	if x != nil {
		return x.TargetKey
	}
	return nil
}

// mapping a member (participant, mediator, sequencer) to a key
// authorization: whoever controls the member uid
// UNIQUE(member, domain)
type OwnerToKeyMappingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the sequencing process member
	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	// the designated keys
	PublicKeys []*v0.PublicKey `protobuf:"bytes,2,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	// optionally restricted to domain
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *OwnerToKeyMappingX) Reset() {
	*x = OwnerToKeyMappingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerToKeyMappingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerToKeyMappingX) ProtoMessage() {}

func (x *OwnerToKeyMappingX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerToKeyMappingX.ProtoReflect.Descriptor instead.
func (*OwnerToKeyMappingX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{3}
}

func (x *OwnerToKeyMappingX) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *OwnerToKeyMappingX) GetPublicKeys() []*v0.PublicKey {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *OwnerToKeyMappingX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// the trust certificate issued by the participant confirming that the participant
// wishes to be present on the given domain
// authorization: whoever controls the participant uid
// UNIQUE(participant,domain)
type DomainTrustCertificateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the uid of the participant
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	// the uid of the domain that the participant trusts
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// if true, the participant restricts the domains to which it accepts transfer outs
	// TODO(#1252) implement transfer permissions
	TransferOnlyToGivenTargetDomains bool `protobuf:"varint,3,opt,name=transfer_only_to_given_target_domains,json=transferOnlyToGivenTargetDomains,proto3" json:"transfer_only_to_given_target_domains,omitempty"`
	// the uids of the target domains that this participants supports for transfer if transfer
	// is restricted.
	TargetDomains []string `protobuf:"bytes,4,rep,name=target_domains,json=targetDomains,proto3" json:"target_domains,omitempty"`
}

func (x *DomainTrustCertificateX) Reset() {
	*x = DomainTrustCertificateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainTrustCertificateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainTrustCertificateX) ProtoMessage() {}

func (x *DomainTrustCertificateX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainTrustCertificateX.ProtoReflect.Descriptor instead.
func (*DomainTrustCertificateX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{4}
}

func (x *DomainTrustCertificateX) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *DomainTrustCertificateX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainTrustCertificateX) GetTransferOnlyToGivenTargetDomains() bool {
	if x != nil {
		return x.TransferOnlyToGivenTargetDomains
	}
	return false
}

func (x *DomainTrustCertificateX) GetTargetDomains() []string {
	if x != nil {
		return x.TargetDomains
	}
	return nil
}

// the optional trust certificate of the domain towards the participant
// authorization: whoever controls the domain uid
// UNIQUE(domain,participant)
type ParticipantDomainPermissionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain      string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Participant string `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	// the permission level of the participant on this domain (usually submission)
	Permission ParticipantPermissionX `protobuf:"varint,3,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v2.ParticipantPermissionX" json:"permission,omitempty"`
	// the trust level of the participant on this domain
	TrustLevel TrustLevelX `protobuf:"varint,4,opt,name=trust_level,json=trustLevel,proto3,enum=com.digitalasset.canton.protocol.v2.TrustLevelX" json:"trust_level,omitempty"`
	// optional individual limits for this participant
	Limits *ParticipantDomainLimits `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty"`
	// optional earliest time when participant can log in (again)
	// used to temporarily disable participants
	// TODO(#11255) implement participant deny list
	LoginAfter *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=login_after,json=loginAfter,proto3" json:"login_after,omitempty"`
}

func (x *ParticipantDomainPermissionX) Reset() {
	*x = ParticipantDomainPermissionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantDomainPermissionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDomainPermissionX) ProtoMessage() {}

func (x *ParticipantDomainPermissionX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDomainPermissionX.ProtoReflect.Descriptor instead.
func (*ParticipantDomainPermissionX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{5}
}

func (x *ParticipantDomainPermissionX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ParticipantDomainPermissionX) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *ParticipantDomainPermissionX) GetPermission() ParticipantPermissionX {
	if x != nil {
		return x.Permission
	}
	return ParticipantPermissionX_MissingParticipantPermission
}

func (x *ParticipantDomainPermissionX) GetTrustLevel() TrustLevelX {
	if x != nil {
		return x.TrustLevel
	}
	return TrustLevelX_MissingTrustLevel
}

func (x *ParticipantDomainPermissionX) GetLimits() *ParticipantDomainLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ParticipantDomainPermissionX) GetLoginAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.LoginAfter
	}
	return nil
}

// the optional hosting limits for a party on a given domain
// these limits can be used to limit the number of participants that can host a given party
// authorization: whoever controls the domain uid
// UNIQUE(domain,party)
// TODO(#11255) implement me
type PartyHostingLimitsX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Party  string `protobuf:"bytes,2,opt,name=party,proto3" json:"party,omitempty"`
	// how many participants can be assigned to the given party
	Quota uint32 `protobuf:"varint,3,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *PartyHostingLimitsX) Reset() {
	*x = PartyHostingLimitsX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyHostingLimitsX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyHostingLimitsX) ProtoMessage() {}

func (x *PartyHostingLimitsX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyHostingLimitsX.ProtoReflect.Descriptor instead.
func (*PartyHostingLimitsX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{6}
}

func (x *PartyHostingLimitsX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PartyHostingLimitsX) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyHostingLimitsX) GetQuota() uint32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

// list of packages supported by this participant
// authorization: whoever controls the participant uid
// UNIQUE(participant, domain)
type VettedPackagesX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the participant vetting the packages
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	// the hash of the vetted packages
	PackageIds []string `protobuf:"bytes,2,rep,name=package_ids,json=packageIds,proto3" json:"package_ids,omitempty"`
	// optionally restricted to domain
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *VettedPackagesX) Reset() {
	*x = VettedPackagesX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VettedPackagesX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VettedPackagesX) ProtoMessage() {}

func (x *VettedPackagesX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VettedPackagesX.ProtoReflect.Descriptor instead.
func (*VettedPackagesX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{7}
}

func (x *VettedPackagesX) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *VettedPackagesX) GetPackageIds() []string {
	if x != nil {
		return x.PackageIds
	}
	return nil
}

func (x *VettedPackagesX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// mapping that maps a party to a participant
// authorization: whoever controls the party and all the owners of the participants that
//   were not already present in the tx with serial = n - 1
//   exception:
//     - a participant can disassociate itself with the party unilaterally as long there will be
//       enough participants to reach "threshold" during confirmation.
// UNIQUE(party, domain)
type PartyToParticipantX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the party that is to be represented by the participants
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// the signatory threshold required by the participants to be able to act on behalf of the party.
	// a mapping with threshold > 1 is considered a definition of a consortium party
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// which participants will host the party.
	// if threshold > 1, must be Confirmation or Observation
	Participants []*PartyToParticipantX_HostingParticipant `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	// if true, then the canton transaction is addressed to the party (group broadcast)
	// and not to the individual participants for efficiency reasons
	GroupAddressing bool `protobuf:"varint,4,opt,name=group_addressing,json=groupAddressing,proto3" json:"group_addressing,omitempty"`
	// optionally restricted to domain
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *PartyToParticipantX) Reset() {
	*x = PartyToParticipantX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyToParticipantX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipantX) ProtoMessage() {}

func (x *PartyToParticipantX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipantX.ProtoReflect.Descriptor instead.
func (*PartyToParticipantX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{8}
}

func (x *PartyToParticipantX) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *PartyToParticipantX) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *PartyToParticipantX) GetParticipants() []*PartyToParticipantX_HostingParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *PartyToParticipantX) GetGroupAddressing() bool {
	if x != nil {
		return x.GroupAddressing
	}
	return false
}

func (x *PartyToParticipantX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// which parties can exercise the authority over another party
// authorization: whoever controls the consortium and all the owners of the parties that
//   were not already present in the tx with serial = n - 1
// UNIQUE(party, domain)
type AuthorityOfX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the party for which some other parties can gain authority
	Party string `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	// the signatory threshold required by the parties to be able to act on behalf of the consortium within Daml
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// the list of parties which can gain authority
	Parties []string `protobuf:"bytes,3,rep,name=parties,proto3" json:"parties,omitempty"`
	// optionally restricted to domain
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *AuthorityOfX) Reset() {
	*x = AuthorityOfX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorityOfX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorityOfX) ProtoMessage() {}

func (x *AuthorityOfX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorityOfX.ProtoReflect.Descriptor instead.
func (*AuthorityOfX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{9}
}

func (x *AuthorityOfX) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *AuthorityOfX) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AuthorityOfX) GetParties() []string {
	if x != nil {
		return x.Parties
	}
	return nil
}

func (x *AuthorityOfX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// which dynamic domain parameters are supposed to be used on the given domain
// authorization: whoever controls the domain
// UNIQUE(domain)
type DomainParametersStateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain affected by the new domain parameters
	Domain           string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	DomainParameters *DynamicDomainParametersX `protobuf:"bytes,2,opt,name=domain_parameters,json=domainParameters,proto3" json:"domain_parameters,omitempty"`
}

func (x *DomainParametersStateX) Reset() {
	*x = DomainParametersStateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainParametersStateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainParametersStateX) ProtoMessage() {}

func (x *DomainParametersStateX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainParametersStateX.ProtoReflect.Descriptor instead.
func (*DomainParametersStateX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{10}
}

func (x *DomainParametersStateX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainParametersStateX) GetDomainParameters() *DynamicDomainParametersX {
	if x != nil {
		return x.DomainParameters
	}
	return nil
}

// which mediators and mediator groups are active on the given domain
// authorization: whoever controls the domain and all the owners of the active or observing mediators that
//   were not already present in the tx with serial = n - 1
//   exception: a mediator can leave the consortium unilaterally as long as there are enough members
//              to reach the threshold
// UNIQUE(domain, group)
type MediatorDomainStateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the domain-id of the mediator group
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the group-id used for sharding multiple mediator groups
	Group uint32 `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	// the signature threshold required to reach consensus among the mediators
	Threshold uint32 `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// the list of active mediators (uid) within the group
	Active []string `protobuf:"bytes,4,rep,name=active,proto3" json:"active,omitempty"`
	// the list of observing mediators (uid) within the group (read messages but don't respond)
	Observers []string `protobuf:"bytes,5,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (x *MediatorDomainStateX) Reset() {
	*x = MediatorDomainStateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediatorDomainStateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediatorDomainStateX) ProtoMessage() {}

func (x *MediatorDomainStateX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediatorDomainStateX.ProtoReflect.Descriptor instead.
func (*MediatorDomainStateX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{11}
}

func (x *MediatorDomainStateX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MediatorDomainStateX) GetGroup() uint32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *MediatorDomainStateX) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *MediatorDomainStateX) GetActive() []string {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *MediatorDomainStateX) GetObservers() []string {
	if x != nil {
		return x.Observers
	}
	return nil
}

// which sequencers are active on the given domain
// authorization: whoever controls the domain and all the owners of the active or observing sequencers that
//   were not already present in the tx with serial = n - 1
//   exception: a sequencer can leave the consortium unilaterally as long as there are enough members
//              to reach the threshold
// UNIQUE(domain)
type SequencerDomainStateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the domain-id of the sequencer group
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the signature threshold required to reach consensus
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// the list of active sequencers
	Active []string `protobuf:"bytes,3,rep,name=active,proto3" json:"active,omitempty"`
	// the list of observing sequencers (uid) within the group (read messages but don't respond)
	Observers []string `protobuf:"bytes,4,rep,name=observers,proto3" json:"observers,omitempty"`
}

func (x *SequencerDomainStateX) Reset() {
	*x = SequencerDomainStateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequencerDomainStateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencerDomainStateX) ProtoMessage() {}

func (x *SequencerDomainStateX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencerDomainStateX.ProtoReflect.Descriptor instead.
func (*SequencerDomainStateX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{12}
}

func (x *SequencerDomainStateX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SequencerDomainStateX) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SequencerDomainStateX) GetActive() []string {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *SequencerDomainStateX) GetObservers() []string {
	if x != nil {
		return x.Observers
	}
	return nil
}

// explicitly invalidate topology transactions for good
// this can be used by the domain to offboard participants forcefully or to
// remove stray topology transactions
// authorization: whoever controls the domain
// UNIQUE(domain)
type PurgeTopologyTransactionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the domain-id
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// the list of mappings to remove from this domain
	Mappings []*TopologyMappingX `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *PurgeTopologyTransactionX) Reset() {
	*x = PurgeTopologyTransactionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeTopologyTransactionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeTopologyTransactionX) ProtoMessage() {}

func (x *PurgeTopologyTransactionX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeTopologyTransactionX.ProtoReflect.Descriptor instead.
func (*PurgeTopologyTransactionX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{13}
}

func (x *PurgeTopologyTransactionX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PurgeTopologyTransactionX) GetMappings() []*TopologyMappingX {
	if x != nil {
		return x.Mappings
	}
	return nil
}

// UNIQUE(domain, member)
// authorization: whoever controls the domain
type TrafficControlStateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the domain-id
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// member to change traffic control state for
	Member string `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	// total amount of traffic ever purchased, including the new top up amount, which must be positive and monotonically increasing.
	TotalExtraTrafficLimit uint64 `protobuf:"varint,3,opt,name=total_extra_traffic_limit,json=totalExtraTrafficLimit,proto3" json:"total_extra_traffic_limit,omitempty"`
}

func (x *TrafficControlStateX) Reset() {
	*x = TrafficControlStateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficControlStateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficControlStateX) ProtoMessage() {}

func (x *TrafficControlStateX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficControlStateX.ProtoReflect.Descriptor instead.
func (*TrafficControlStateX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{14}
}

func (x *TrafficControlStateX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TrafficControlStateX) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *TrafficControlStateX) GetTotalExtraTrafficLimit() uint64 {
	if x != nil {
		return x.TotalExtraTrafficLimit
	}
	return 0
}

type TopologyMappingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mapping:
	//	*TopologyMappingX_NamespaceDelegation
	//	*TopologyMappingX_IdentifierDelegation
	//	*TopologyMappingX_UnionspaceDefinition
	//	*TopologyMappingX_OwnerToKeyMapping
	//	*TopologyMappingX_DomainTrustCertificate
	//	*TopologyMappingX_ParticipantPermission
	//	*TopologyMappingX_PartyHostingLimits
	//	*TopologyMappingX_VettedPackages
	//	*TopologyMappingX_PartyToParticipant
	//	*TopologyMappingX_AuthorityOf
	//	*TopologyMappingX_DomainParametersState
	//	*TopologyMappingX_MediatorDomainState
	//	*TopologyMappingX_SequencerDomainState
	//	*TopologyMappingX_PurgeTopologyTxs
	//	*TopologyMappingX_TrafficControlState
	Mapping isTopologyMappingX_Mapping `protobuf_oneof:"mapping"`
}

func (x *TopologyMappingX) Reset() {
	*x = TopologyMappingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyMappingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyMappingX) ProtoMessage() {}

func (x *TopologyMappingX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyMappingX.ProtoReflect.Descriptor instead.
func (*TopologyMappingX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{15}
}

func (m *TopologyMappingX) GetMapping() isTopologyMappingX_Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (x *TopologyMappingX) GetNamespaceDelegation() *NamespaceDelegationX {
	if x, ok := x.GetMapping().(*TopologyMappingX_NamespaceDelegation); ok {
		return x.NamespaceDelegation
	}
	return nil
}

func (x *TopologyMappingX) GetIdentifierDelegation() *IdentifierDelegationX {
	if x, ok := x.GetMapping().(*TopologyMappingX_IdentifierDelegation); ok {
		return x.IdentifierDelegation
	}
	return nil
}

func (x *TopologyMappingX) GetUnionspaceDefinition() *UnionspaceDefinitionX {
	if x, ok := x.GetMapping().(*TopologyMappingX_UnionspaceDefinition); ok {
		return x.UnionspaceDefinition
	}
	return nil
}

func (x *TopologyMappingX) GetOwnerToKeyMapping() *OwnerToKeyMappingX {
	if x, ok := x.GetMapping().(*TopologyMappingX_OwnerToKeyMapping); ok {
		return x.OwnerToKeyMapping
	}
	return nil
}

func (x *TopologyMappingX) GetDomainTrustCertificate() *DomainTrustCertificateX {
	if x, ok := x.GetMapping().(*TopologyMappingX_DomainTrustCertificate); ok {
		return x.DomainTrustCertificate
	}
	return nil
}

func (x *TopologyMappingX) GetParticipantPermission() *ParticipantDomainPermissionX {
	if x, ok := x.GetMapping().(*TopologyMappingX_ParticipantPermission); ok {
		return x.ParticipantPermission
	}
	return nil
}

func (x *TopologyMappingX) GetPartyHostingLimits() *PartyHostingLimitsX {
	if x, ok := x.GetMapping().(*TopologyMappingX_PartyHostingLimits); ok {
		return x.PartyHostingLimits
	}
	return nil
}

func (x *TopologyMappingX) GetVettedPackages() *VettedPackagesX {
	if x, ok := x.GetMapping().(*TopologyMappingX_VettedPackages); ok {
		return x.VettedPackages
	}
	return nil
}

func (x *TopologyMappingX) GetPartyToParticipant() *PartyToParticipantX {
	if x, ok := x.GetMapping().(*TopologyMappingX_PartyToParticipant); ok {
		return x.PartyToParticipant
	}
	return nil
}

func (x *TopologyMappingX) GetAuthorityOf() *AuthorityOfX {
	if x, ok := x.GetMapping().(*TopologyMappingX_AuthorityOf); ok {
		return x.AuthorityOf
	}
	return nil
}

func (x *TopologyMappingX) GetDomainParametersState() *DomainParametersStateX {
	if x, ok := x.GetMapping().(*TopologyMappingX_DomainParametersState); ok {
		return x.DomainParametersState
	}
	return nil
}

func (x *TopologyMappingX) GetMediatorDomainState() *MediatorDomainStateX {
	if x, ok := x.GetMapping().(*TopologyMappingX_MediatorDomainState); ok {
		return x.MediatorDomainState
	}
	return nil
}

func (x *TopologyMappingX) GetSequencerDomainState() *SequencerDomainStateX {
	if x, ok := x.GetMapping().(*TopologyMappingX_SequencerDomainState); ok {
		return x.SequencerDomainState
	}
	return nil
}

func (x *TopologyMappingX) GetPurgeTopologyTxs() *PurgeTopologyTransactionX {
	if x, ok := x.GetMapping().(*TopologyMappingX_PurgeTopologyTxs); ok {
		return x.PurgeTopologyTxs
	}
	return nil
}

func (x *TopologyMappingX) GetTrafficControlState() *TrafficControlStateX {
	if x, ok := x.GetMapping().(*TopologyMappingX_TrafficControlState); ok {
		return x.TrafficControlState
	}
	return nil
}

type isTopologyMappingX_Mapping interface {
	isTopologyMappingX_Mapping()
}

type TopologyMappingX_NamespaceDelegation struct {
	NamespaceDelegation *NamespaceDelegationX `protobuf:"bytes,1,opt,name=namespace_delegation,json=namespaceDelegation,proto3,oneof"`
}

type TopologyMappingX_IdentifierDelegation struct {
	IdentifierDelegation *IdentifierDelegationX `protobuf:"bytes,2,opt,name=identifier_delegation,json=identifierDelegation,proto3,oneof"`
}

type TopologyMappingX_UnionspaceDefinition struct {
	UnionspaceDefinition *UnionspaceDefinitionX `protobuf:"bytes,3,opt,name=unionspace_definition,json=unionspaceDefinition,proto3,oneof"`
}

type TopologyMappingX_OwnerToKeyMapping struct {
	OwnerToKeyMapping *OwnerToKeyMappingX `protobuf:"bytes,4,opt,name=owner_to_key_mapping,json=ownerToKeyMapping,proto3,oneof"`
}

type TopologyMappingX_DomainTrustCertificate struct {
	DomainTrustCertificate *DomainTrustCertificateX `protobuf:"bytes,5,opt,name=domain_trust_certificate,json=domainTrustCertificate,proto3,oneof"`
}

type TopologyMappingX_ParticipantPermission struct {
	ParticipantPermission *ParticipantDomainPermissionX `protobuf:"bytes,6,opt,name=participant_permission,json=participantPermission,proto3,oneof"`
}

type TopologyMappingX_PartyHostingLimits struct {
	PartyHostingLimits *PartyHostingLimitsX `protobuf:"bytes,7,opt,name=party_hosting_limits,json=partyHostingLimits,proto3,oneof"`
}

type TopologyMappingX_VettedPackages struct {
	VettedPackages *VettedPackagesX `protobuf:"bytes,8,opt,name=vetted_packages,json=vettedPackages,proto3,oneof"`
}

type TopologyMappingX_PartyToParticipant struct {
	PartyToParticipant *PartyToParticipantX `protobuf:"bytes,9,opt,name=party_to_participant,json=partyToParticipant,proto3,oneof"`
}

type TopologyMappingX_AuthorityOf struct {
	AuthorityOf *AuthorityOfX `protobuf:"bytes,10,opt,name=authority_of,json=authorityOf,proto3,oneof"`
}

type TopologyMappingX_DomainParametersState struct {
	DomainParametersState *DomainParametersStateX `protobuf:"bytes,11,opt,name=domain_parameters_state,json=domainParametersState,proto3,oneof"`
}

type TopologyMappingX_MediatorDomainState struct {
	MediatorDomainState *MediatorDomainStateX `protobuf:"bytes,12,opt,name=mediator_domain_state,json=mediatorDomainState,proto3,oneof"`
}

type TopologyMappingX_SequencerDomainState struct {
	SequencerDomainState *SequencerDomainStateX `protobuf:"bytes,13,opt,name=sequencer_domain_state,json=sequencerDomainState,proto3,oneof"`
}

type TopologyMappingX_PurgeTopologyTxs struct {
	PurgeTopologyTxs *PurgeTopologyTransactionX `protobuf:"bytes,14,opt,name=purge_topology_txs,json=purgeTopologyTxs,proto3,oneof"`
}

type TopologyMappingX_TrafficControlState struct {
	TrafficControlState *TrafficControlStateX `protobuf:"bytes,15,opt,name=traffic_control_state,json=trafficControlState,proto3,oneof"`
}

func (*TopologyMappingX_NamespaceDelegation) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_IdentifierDelegation) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_UnionspaceDefinition) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_OwnerToKeyMapping) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_DomainTrustCertificate) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_ParticipantPermission) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_PartyHostingLimits) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_VettedPackages) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_PartyToParticipant) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_AuthorityOf) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_DomainParametersState) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_MediatorDomainState) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_SequencerDomainState) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_PurgeTopologyTxs) isTopologyMappingX_Mapping() {}

func (*TopologyMappingX_TrafficControlState) isTopologyMappingX_Mapping() {}

type TopologyTransactionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation TopologyChangeOpX `protobuf:"varint,1,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v2.TopologyChangeOpX" json:"operation,omitempty"`
	// Serial identifier of this transaction used to prevent replay attacks.
	// A topology transaction is replacing the existing transaction with serial - 1
	// that has the same unique key.
	Serial uint32 `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	// the element of this topology transaction
	Mapping *TopologyMappingX `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *TopologyTransactionX) Reset() {
	*x = TopologyTransactionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyTransactionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyTransactionX) ProtoMessage() {}

func (x *TopologyTransactionX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyTransactionX.ProtoReflect.Descriptor instead.
func (*TopologyTransactionX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{16}
}

func (x *TopologyTransactionX) GetOperation() TopologyChangeOpX {
	if x != nil {
		return x.Operation
	}
	return TopologyChangeOpX_Replace
}

func (x *TopologyTransactionX) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *TopologyTransactionX) GetMapping() *TopologyMappingX {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type SignedTopologyTransactionX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serialized topology transaction (protobuf bytestring)
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// multiple signatures (at least one)
	Signatures []*v0.Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// if true, this transaction is just a proposal. this means that every signature is valid,
	// but the signatures are insufficient to properly authorize the transaction
	// proposals are distributed via the topology channel too. proposals will be pruned automatically
	// when the nodes are pruned
	// TODO(#11255) implement proposal and implement pruning
	Proposal bool `protobuf:"varint,3,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (x *SignedTopologyTransactionX) Reset() {
	*x = SignedTopologyTransactionX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTopologyTransactionX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTopologyTransactionX) ProtoMessage() {}

func (x *SignedTopologyTransactionX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTopologyTransactionX.ProtoReflect.Descriptor instead.
func (*SignedTopologyTransactionX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{17}
}

func (x *SignedTopologyTransactionX) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SignedTopologyTransactionX) GetSignatures() []*v0.Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedTopologyTransactionX) GetProposal() bool {
	if x != nil {
		return x.Proposal
	}
	return false
}

// TODO(#11255) make this a signed protocol message
type AcceptedTopologyTransactionsX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain   string                                           `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Accepted []*AcceptedTopologyTransactionsX_AcceptedRequest `protobuf:"bytes,2,rep,name=accepted,proto3" json:"accepted,omitempty"` // TODO(#11255) include max-sequencing time (should be set to request timeout)
}

func (x *AcceptedTopologyTransactionsX) Reset() {
	*x = AcceptedTopologyTransactionsX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedTopologyTransactionsX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedTopologyTransactionsX) ProtoMessage() {}

func (x *AcceptedTopologyTransactionsX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedTopologyTransactionsX.ProtoReflect.Descriptor instead.
func (*AcceptedTopologyTransactionsX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{18}
}

func (x *AcceptedTopologyTransactionsX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AcceptedTopologyTransactionsX) GetAccepted() []*AcceptedTopologyTransactionsX_AcceptedRequest {
	if x != nil {
		return x.Accepted
	}
	return nil
}

type RegisterTopologyTransactionRequestX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the member requesting the approval of the transactions on behalf of the participant.
	// typically this will be either an unauthenticated member (before the participant is active)
	// or the participant or member itself (after it has become active)
	RequestedBy  string                        `protobuf:"bytes,1,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestedFor string                        `protobuf:"bytes,2,opt,name=requested_for,json=requestedFor,proto3" json:"requested_for,omitempty"`
	RequestId    string                        `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Transactions []*SignedTopologyTransactionX `protobuf:"bytes,4,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Domain       string                        `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"` // TODO(#11255) include request timeout / max sequencing time for crash recovery & at most once delivery
}

func (x *RegisterTopologyTransactionRequestX) Reset() {
	*x = RegisterTopologyTransactionRequestX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTopologyTransactionRequestX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopologyTransactionRequestX) ProtoMessage() {}

func (x *RegisterTopologyTransactionRequestX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopologyTransactionRequestX.ProtoReflect.Descriptor instead.
func (*RegisterTopologyTransactionRequestX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterTopologyTransactionRequestX) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *RegisterTopologyTransactionRequestX) GetRequestedFor() string {
	if x != nil {
		return x.RequestedFor
	}
	return ""
}

func (x *RegisterTopologyTransactionRequestX) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RegisterTopologyTransactionRequestX) GetTransactions() []*SignedTopologyTransactionX {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *RegisterTopologyTransactionRequestX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type RegisterTopologyTransactionResponseX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedBy  string                                         `protobuf:"bytes,1,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestedFor string                                         `protobuf:"bytes,2,opt,name=requested_for,json=requestedFor,proto3" json:"requested_for,omitempty"`
	RequestId    string                                         `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Results      []*RegisterTopologyTransactionResponseX_Result `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	Domain       string                                         `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *RegisterTopologyTransactionResponseX) Reset() {
	*x = RegisterTopologyTransactionResponseX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTopologyTransactionResponseX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopologyTransactionResponseX) ProtoMessage() {}

func (x *RegisterTopologyTransactionResponseX) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopologyTransactionResponseX.ProtoReflect.Descriptor instead.
func (*RegisterTopologyTransactionResponseX) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterTopologyTransactionResponseX) GetRequestedBy() string {
	if x != nil {
		return x.RequestedBy
	}
	return ""
}

func (x *RegisterTopologyTransactionResponseX) GetRequestedFor() string {
	if x != nil {
		return x.RequestedFor
	}
	return ""
}

func (x *RegisterTopologyTransactionResponseX) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RegisterTopologyTransactionResponseX) GetResults() []*RegisterTopologyTransactionResponseX_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RegisterTopologyTransactionResponseX) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type PartyToParticipantX_HostingParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the target participant that the party should be mapped to
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	// permission of the participant for this particular party (the actual
	// will be min of ParticipantDomainPermissions and this setting)
	Permission ParticipantPermissionX `protobuf:"varint,2,opt,name=permission,proto3,enum=com.digitalasset.canton.protocol.v2.ParticipantPermissionX" json:"permission,omitempty"`
}

func (x *PartyToParticipantX_HostingParticipant) Reset() {
	*x = PartyToParticipantX_HostingParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyToParticipantX_HostingParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyToParticipantX_HostingParticipant) ProtoMessage() {}

func (x *PartyToParticipantX_HostingParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyToParticipantX_HostingParticipant.ProtoReflect.Descriptor instead.
func (*PartyToParticipantX_HostingParticipant) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PartyToParticipantX_HostingParticipant) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *PartyToParticipantX_HostingParticipant) GetPermission() ParticipantPermissionX {
	if x != nil {
		return x.Permission
	}
	return ParticipantPermissionX_MissingParticipantPermission
}

type AcceptedTopologyTransactionsX_AcceptedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    string                        `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Transactions []*SignedTopologyTransactionX `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *AcceptedTopologyTransactionsX_AcceptedRequest) Reset() {
	*x = AcceptedTopologyTransactionsX_AcceptedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedTopologyTransactionsX_AcceptedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedTopologyTransactionsX_AcceptedRequest) ProtoMessage() {}

func (x *AcceptedTopologyTransactionsX_AcceptedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedTopologyTransactionsX_AcceptedRequest.ProtoReflect.Descriptor instead.
func (*AcceptedTopologyTransactionsX_AcceptedRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{18, 0}
}

func (x *AcceptedTopologyTransactionsX_AcceptedRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AcceptedTopologyTransactionsX_AcceptedRequest) GetTransactions() []*SignedTopologyTransactionX {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type RegisterTopologyTransactionResponseX_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State RegisterTopologyTransactionResponseX_Result_State `protobuf:"varint,1,opt,name=state,proto3,enum=com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX_Result_State" json:"state,omitempty"`
}

func (x *RegisterTopologyTransactionResponseX_Result) Reset() {
	*x = RegisterTopologyTransactionResponseX_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTopologyTransactionResponseX_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTopologyTransactionResponseX_Result) ProtoMessage() {}

func (x *RegisterTopologyTransactionResponseX_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTopologyTransactionResponseX_Result.ProtoReflect.Descriptor instead.
func (*RegisterTopologyTransactionResponseX_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP(), []int{20, 0}
}

func (x *RegisterTopologyTransactionResponseX_Result) GetState() RegisterTopologyTransactionResponseX_Result_State {
	if x != nil {
		return x.State
	}
	return RegisterTopologyTransactionResponseX_Result_MISSING_STATE
}

var File_com_digitalasset_canton_protocol_v2_topology_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_protocol_v2_topology_proto_rawDesc = []byte{
	0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x15,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x15,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x58, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xcb, 0x01, 0x0a,
	0x17, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x54,
	0x6f, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x1c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x58, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x58, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x0f, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x93, 0x03, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x6f, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x58, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x1a, 0x93, 0x01, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x58, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x9c, 0x01,
	0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x6a, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x58, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x58, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x19, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa7, 0x0d, 0x0a, 0x10, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x58, 0x12,
	0x6e, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x71, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x48, 0x00, 0x52, 0x14, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x15, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x48, 0x00, 0x52,
	0x14, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x58, 0x48, 0x00, 0x52, 0x11,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x78, 0x0a, 0x18, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x58, 0x48, 0x00, 0x52, 0x16, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x16, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x58, 0x48, 0x00,
	0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x58, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x76, 0x65, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x58, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x58, 0x48, 0x00,
	0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x6f, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x58, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x12, 0x75, 0x0a, 0x17,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x48, 0x00, 0x52, 0x15, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x48, 0x00, 0x52,
	0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x16, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x48, 0x00, 0x52, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x78, 0x73, 0x12, 0x6f, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x58, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x54, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x58, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x07, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x58, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xa8, 0x01, 0x0a,
	0x1a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0xbf, 0x02, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x58, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x6e, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x58, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x1a, 0x95, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x23, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x58, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xeb, 0x03, 0x0a, 0x24, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x58, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x58, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0xd7, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x6c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x58, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x5f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x05, 0x2a, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x58, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10,
	0x01, 0x2a, 0x3b, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x58,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x69, 0x70, 0x10, 0x02, 0x2a, 0x6d,
	0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x42, 0x54, 0x5a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c, 0x2d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x37, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescData = file_com_digitalasset_canton_protocol_v2_topology_proto_rawDesc
)

func file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescData)
	})
	return file_com_digitalasset_canton_protocol_v2_topology_proto_rawDescData
}

var file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_com_digitalasset_canton_protocol_v2_topology_proto_goTypes = []interface{}{
	(TopologyChangeOpX)(0),      // 0: com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	(TrustLevelX)(0),            // 1: com.digitalasset.canton.protocol.v2.TrustLevelX
	(ParticipantPermissionX)(0), // 2: com.digitalasset.canton.protocol.v2.ParticipantPermissionX
	(RegisterTopologyTransactionResponseX_Result_State)(0), // 3: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX.Result.State
	(*NamespaceDelegationX)(nil),                           // 4: com.digitalasset.canton.protocol.v2.NamespaceDelegationX
	(*UnionspaceDefinitionX)(nil),                          // 5: com.digitalasset.canton.protocol.v2.UnionspaceDefinitionX
	(*IdentifierDelegationX)(nil),                          // 6: com.digitalasset.canton.protocol.v2.IdentifierDelegationX
	(*OwnerToKeyMappingX)(nil),                             // 7: com.digitalasset.canton.protocol.v2.OwnerToKeyMappingX
	(*DomainTrustCertificateX)(nil),                        // 8: com.digitalasset.canton.protocol.v2.DomainTrustCertificateX
	(*ParticipantDomainPermissionX)(nil),                   // 9: com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX
	(*PartyHostingLimitsX)(nil),                            // 10: com.digitalasset.canton.protocol.v2.PartyHostingLimitsX
	(*VettedPackagesX)(nil),                                // 11: com.digitalasset.canton.protocol.v2.VettedPackagesX
	(*PartyToParticipantX)(nil),                            // 12: com.digitalasset.canton.protocol.v2.PartyToParticipantX
	(*AuthorityOfX)(nil),                                   // 13: com.digitalasset.canton.protocol.v2.AuthorityOfX
	(*DomainParametersStateX)(nil),                         // 14: com.digitalasset.canton.protocol.v2.DomainParametersStateX
	(*MediatorDomainStateX)(nil),                           // 15: com.digitalasset.canton.protocol.v2.MediatorDomainStateX
	(*SequencerDomainStateX)(nil),                          // 16: com.digitalasset.canton.protocol.v2.SequencerDomainStateX
	(*PurgeTopologyTransactionX)(nil),                      // 17: com.digitalasset.canton.protocol.v2.PurgeTopologyTransactionX
	(*TrafficControlStateX)(nil),                           // 18: com.digitalasset.canton.protocol.v2.TrafficControlStateX
	(*TopologyMappingX)(nil),                               // 19: com.digitalasset.canton.protocol.v2.TopologyMappingX
	(*TopologyTransactionX)(nil),                           // 20: com.digitalasset.canton.protocol.v2.TopologyTransactionX
	(*SignedTopologyTransactionX)(nil),                     // 21: com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX
	(*AcceptedTopologyTransactionsX)(nil),                  // 22: com.digitalasset.canton.protocol.v2.AcceptedTopologyTransactionsX
	(*RegisterTopologyTransactionRequestX)(nil),            // 23: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionRequestX
	(*RegisterTopologyTransactionResponseX)(nil),           // 24: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX
	(*PartyToParticipantX_HostingParticipant)(nil),         // 25: com.digitalasset.canton.protocol.v2.PartyToParticipantX.HostingParticipant
	(*AcceptedTopologyTransactionsX_AcceptedRequest)(nil),  // 26: com.digitalasset.canton.protocol.v2.AcceptedTopologyTransactionsX.AcceptedRequest
	(*RegisterTopologyTransactionResponseX_Result)(nil),    // 27: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX.Result
	(*v0.SigningPublicKey)(nil),                            // 28: com.digitalasset.canton.crypto.v0.SigningPublicKey
	(*v0.PublicKey)(nil),                                   // 29: com.digitalasset.canton.crypto.v0.PublicKey
	(*ParticipantDomainLimits)(nil),                        // 30: com.digitalasset.canton.protocol.v2.ParticipantDomainLimits
	(*timestamppb.Timestamp)(nil),                          // 31: google.protobuf.Timestamp
	(*DynamicDomainParametersX)(nil),                       // 32: com.digitalasset.canton.protocol.v2.DynamicDomainParametersX
	(*v0.Signature)(nil),                                   // 33: com.digitalasset.canton.crypto.v0.Signature
}
var file_com_digitalasset_canton_protocol_v2_topology_proto_depIdxs = []int32{
	28, // 0: com.digitalasset.canton.protocol.v2.NamespaceDelegationX.target_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	28, // 1: com.digitalasset.canton.protocol.v2.IdentifierDelegationX.target_key:type_name -> com.digitalasset.canton.crypto.v0.SigningPublicKey
	29, // 2: com.digitalasset.canton.protocol.v2.OwnerToKeyMappingX.public_keys:type_name -> com.digitalasset.canton.crypto.v0.PublicKey
	2,  // 3: com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX.permission:type_name -> com.digitalasset.canton.protocol.v2.ParticipantPermissionX
	1,  // 4: com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX.trust_level:type_name -> com.digitalasset.canton.protocol.v2.TrustLevelX
	30, // 5: com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX.limits:type_name -> com.digitalasset.canton.protocol.v2.ParticipantDomainLimits
	31, // 6: com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX.login_after:type_name -> google.protobuf.Timestamp
	25, // 7: com.digitalasset.canton.protocol.v2.PartyToParticipantX.participants:type_name -> com.digitalasset.canton.protocol.v2.PartyToParticipantX.HostingParticipant
	32, // 8: com.digitalasset.canton.protocol.v2.DomainParametersStateX.domain_parameters:type_name -> com.digitalasset.canton.protocol.v2.DynamicDomainParametersX
	19, // 9: com.digitalasset.canton.protocol.v2.PurgeTopologyTransactionX.mappings:type_name -> com.digitalasset.canton.protocol.v2.TopologyMappingX
	4,  // 10: com.digitalasset.canton.protocol.v2.TopologyMappingX.namespace_delegation:type_name -> com.digitalasset.canton.protocol.v2.NamespaceDelegationX
	6,  // 11: com.digitalasset.canton.protocol.v2.TopologyMappingX.identifier_delegation:type_name -> com.digitalasset.canton.protocol.v2.IdentifierDelegationX
	5,  // 12: com.digitalasset.canton.protocol.v2.TopologyMappingX.unionspace_definition:type_name -> com.digitalasset.canton.protocol.v2.UnionspaceDefinitionX
	7,  // 13: com.digitalasset.canton.protocol.v2.TopologyMappingX.owner_to_key_mapping:type_name -> com.digitalasset.canton.protocol.v2.OwnerToKeyMappingX
	8,  // 14: com.digitalasset.canton.protocol.v2.TopologyMappingX.domain_trust_certificate:type_name -> com.digitalasset.canton.protocol.v2.DomainTrustCertificateX
	9,  // 15: com.digitalasset.canton.protocol.v2.TopologyMappingX.participant_permission:type_name -> com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX
	10, // 16: com.digitalasset.canton.protocol.v2.TopologyMappingX.party_hosting_limits:type_name -> com.digitalasset.canton.protocol.v2.PartyHostingLimitsX
	11, // 17: com.digitalasset.canton.protocol.v2.TopologyMappingX.vetted_packages:type_name -> com.digitalasset.canton.protocol.v2.VettedPackagesX
	12, // 18: com.digitalasset.canton.protocol.v2.TopologyMappingX.party_to_participant:type_name -> com.digitalasset.canton.protocol.v2.PartyToParticipantX
	13, // 19: com.digitalasset.canton.protocol.v2.TopologyMappingX.authority_of:type_name -> com.digitalasset.canton.protocol.v2.AuthorityOfX
	14, // 20: com.digitalasset.canton.protocol.v2.TopologyMappingX.domain_parameters_state:type_name -> com.digitalasset.canton.protocol.v2.DomainParametersStateX
	15, // 21: com.digitalasset.canton.protocol.v2.TopologyMappingX.mediator_domain_state:type_name -> com.digitalasset.canton.protocol.v2.MediatorDomainStateX
	16, // 22: com.digitalasset.canton.protocol.v2.TopologyMappingX.sequencer_domain_state:type_name -> com.digitalasset.canton.protocol.v2.SequencerDomainStateX
	17, // 23: com.digitalasset.canton.protocol.v2.TopologyMappingX.purge_topology_txs:type_name -> com.digitalasset.canton.protocol.v2.PurgeTopologyTransactionX
	18, // 24: com.digitalasset.canton.protocol.v2.TopologyMappingX.traffic_control_state:type_name -> com.digitalasset.canton.protocol.v2.TrafficControlStateX
	0,  // 25: com.digitalasset.canton.protocol.v2.TopologyTransactionX.operation:type_name -> com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	19, // 26: com.digitalasset.canton.protocol.v2.TopologyTransactionX.mapping:type_name -> com.digitalasset.canton.protocol.v2.TopologyMappingX
	33, // 27: com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX.signatures:type_name -> com.digitalasset.canton.crypto.v0.Signature
	26, // 28: com.digitalasset.canton.protocol.v2.AcceptedTopologyTransactionsX.accepted:type_name -> com.digitalasset.canton.protocol.v2.AcceptedTopologyTransactionsX.AcceptedRequest
	21, // 29: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionRequestX.transactions:type_name -> com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX
	27, // 30: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX.results:type_name -> com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX.Result
	2,  // 31: com.digitalasset.canton.protocol.v2.PartyToParticipantX.HostingParticipant.permission:type_name -> com.digitalasset.canton.protocol.v2.ParticipantPermissionX
	21, // 32: com.digitalasset.canton.protocol.v2.AcceptedTopologyTransactionsX.AcceptedRequest.transactions:type_name -> com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX
	3,  // 33: com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX.Result.state:type_name -> com.digitalasset.canton.protocol.v2.RegisterTopologyTransactionResponseX.Result.State
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_com_digitalasset_canton_protocol_v2_topology_proto_init() }
func file_com_digitalasset_canton_protocol_v2_topology_proto_init() {
	if File_com_digitalasset_canton_protocol_v2_topology_proto != nil {
		return
	}
	file_com_digitalasset_canton_protocol_v2_domain_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceDelegationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionspaceDefinitionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierDelegationX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerToKeyMappingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainTrustCertificateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantDomainPermissionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyHostingLimitsX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VettedPackagesX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyToParticipantX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorityOfX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainParametersStateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediatorDomainStateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequencerDomainStateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeTopologyTransactionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficControlStateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyMappingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyTransactionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTopologyTransactionX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedTopologyTransactionsX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTopologyTransactionRequestX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTopologyTransactionResponseX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyToParticipantX_HostingParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedTopologyTransactionsX_AcceptedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTopologyTransactionResponseX_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TopologyMappingX_NamespaceDelegation)(nil),
		(*TopologyMappingX_IdentifierDelegation)(nil),
		(*TopologyMappingX_UnionspaceDefinition)(nil),
		(*TopologyMappingX_OwnerToKeyMapping)(nil),
		(*TopologyMappingX_DomainTrustCertificate)(nil),
		(*TopologyMappingX_ParticipantPermission)(nil),
		(*TopologyMappingX_PartyHostingLimits)(nil),
		(*TopologyMappingX_VettedPackages)(nil),
		(*TopologyMappingX_PartyToParticipant)(nil),
		(*TopologyMappingX_AuthorityOf)(nil),
		(*TopologyMappingX_DomainParametersState)(nil),
		(*TopologyMappingX_MediatorDomainState)(nil),
		(*TopologyMappingX_SequencerDomainState)(nil),
		(*TopologyMappingX_PurgeTopologyTxs)(nil),
		(*TopologyMappingX_TrafficControlState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_protocol_v2_topology_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_digitalasset_canton_protocol_v2_topology_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_protocol_v2_topology_proto_depIdxs,
		EnumInfos:         file_com_digitalasset_canton_protocol_v2_topology_proto_enumTypes,
		MessageInfos:      file_com_digitalasset_canton_protocol_v2_topology_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_protocol_v2_topology_proto = out.File
	file_com_digitalasset_canton_protocol_v2_topology_proto_rawDesc = nil
	file_com_digitalasset_canton_protocol_v2_topology_proto_goTypes = nil
	file_com_digitalasset_canton_protocol_v2_topology_proto_depIdxs = nil
}

// Copyright (c) 2017-2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: com/digitalasset/canton/crypto/admin/v0/vault_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VaultServiceClient is the client API for VaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultServiceClient interface {
	//*
	// List public keys according to request filter for which we have a private key in our key vault.
	//
	// The request includes a filter for fingerprints which can be used for lookups.
	//
	// @param ListMyKeysRequest: request with optional fingerprint filter
	// @return: all serialized keys and metadata that have the fingerprint filter as a substring in their fingerprint
	ListMyKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListMyKeysResponse, error)
	//*
	// Generates a new public / private key pair for signing.
	//
	// Stores the private key in the vault, and returns the public key
	GenerateSigningKey(ctx context.Context, in *GenerateSigningKeyRequest, opts ...grpc.CallOption) (*GenerateSigningKeyResponse, error)
	//*
	// Generates a new public / private key pair for hybrid encryption.
	//
	// Stores the private key in the vault, and returns the public key
	GenerateEncryptionKey(ctx context.Context, in *GenerateEncryptionKeyRequest, opts ...grpc.CallOption) (*GenerateEncryptionKeyResponse, error)
	//*
	// Registers a KMS key for asymmetric/hybrid encryption.
	//
	// Stores the corresponding public key in the vault, and returns it
	RegisterKmsEncryptionKey(ctx context.Context, in *RegisterKmsEncryptionKeyRequest, opts ...grpc.CallOption) (*RegisterKmsEncryptionKeyResponse, error)
	//*
	// Registers a KMS key for signing.
	//
	// Stores the corresponding public key in the vault, and returns it
	RegisterKmsSigningKey(ctx context.Context, in *RegisterKmsSigningKeyRequest, opts ...grpc.CallOption) (*RegisterKmsSigningKeyResponse, error)
	//*
	// Import a public key into the registry in order to provide that Fingerprint -> PublicKey lookups
	//
	// @param: ImportPublicKeyRequest serialized public key to be imported
	// @return: fingerprint and serialized public key of imported public key
	ImportPublicKey(ctx context.Context, in *ImportPublicKeyRequest, opts ...grpc.CallOption) (*ImportPublicKeyResponse, error)
	//*
	// Lists all public keys matching the supplied filter which are internally cached
	//
	// Any public key returned here can be referenced in topology transaction building
	// by fingerprint.
	ListPublicKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	//*
	// Changes the wrapper key that is used to encrypt private keys when stored
	RotateWrapperKey(ctx context.Context, in *RotateWrapperKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWrapperKeyId(ctx context.Context, in *GetWrapperKeyIdRequest, opts ...grpc.CallOption) (*GetWrapperKeyIdResponse, error)
	ExportKeyPair(ctx context.Context, in *ExportKeyPairRequest, opts ...grpc.CallOption) (*ExportKeyPairResponse, error)
	ImportKeyPair(ctx context.Context, in *ImportKeyPairRequest, opts ...grpc.CallOption) (*ImportKeyPairResponse, error)
	DeleteKeyPair(ctx context.Context, in *DeleteKeyPairRequest, opts ...grpc.CallOption) (*DeleteKeyPairResponse, error)
}

type vaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultServiceClient(cc grpc.ClientConnInterface) VaultServiceClient {
	return &vaultServiceClient{cc}
}

func (c *vaultServiceClient) ListMyKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListMyKeysResponse, error) {
	out := new(ListMyKeysResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/ListMyKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GenerateSigningKey(ctx context.Context, in *GenerateSigningKeyRequest, opts ...grpc.CallOption) (*GenerateSigningKeyResponse, error) {
	out := new(GenerateSigningKeyResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/GenerateSigningKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GenerateEncryptionKey(ctx context.Context, in *GenerateEncryptionKeyRequest, opts ...grpc.CallOption) (*GenerateEncryptionKeyResponse, error) {
	out := new(GenerateEncryptionKeyResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/GenerateEncryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) RegisterKmsEncryptionKey(ctx context.Context, in *RegisterKmsEncryptionKeyRequest, opts ...grpc.CallOption) (*RegisterKmsEncryptionKeyResponse, error) {
	out := new(RegisterKmsEncryptionKeyResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/RegisterKmsEncryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) RegisterKmsSigningKey(ctx context.Context, in *RegisterKmsSigningKeyRequest, opts ...grpc.CallOption) (*RegisterKmsSigningKeyResponse, error) {
	out := new(RegisterKmsSigningKeyResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/RegisterKmsSigningKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) ImportPublicKey(ctx context.Context, in *ImportPublicKeyRequest, opts ...grpc.CallOption) (*ImportPublicKeyResponse, error) {
	out := new(ImportPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/ImportPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) ListPublicKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/ListPublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) RotateWrapperKey(ctx context.Context, in *RotateWrapperKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/RotateWrapperKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) GetWrapperKeyId(ctx context.Context, in *GetWrapperKeyIdRequest, opts ...grpc.CallOption) (*GetWrapperKeyIdResponse, error) {
	out := new(GetWrapperKeyIdResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/GetWrapperKeyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) ExportKeyPair(ctx context.Context, in *ExportKeyPairRequest, opts ...grpc.CallOption) (*ExportKeyPairResponse, error) {
	out := new(ExportKeyPairResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/ExportKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) ImportKeyPair(ctx context.Context, in *ImportKeyPairRequest, opts ...grpc.CallOption) (*ImportKeyPairResponse, error) {
	out := new(ImportKeyPairResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/ImportKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) DeleteKeyPair(ctx context.Context, in *DeleteKeyPairRequest, opts ...grpc.CallOption) (*DeleteKeyPairResponse, error) {
	out := new(DeleteKeyPairResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.crypto.admin.v0.VaultService/DeleteKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServiceServer is the server API for VaultService service.
// All implementations must embed UnimplementedVaultServiceServer
// for forward compatibility
type VaultServiceServer interface {
	//*
	// List public keys according to request filter for which we have a private key in our key vault.
	//
	// The request includes a filter for fingerprints which can be used for lookups.
	//
	// @param ListMyKeysRequest: request with optional fingerprint filter
	// @return: all serialized keys and metadata that have the fingerprint filter as a substring in their fingerprint
	ListMyKeys(context.Context, *ListKeysRequest) (*ListMyKeysResponse, error)
	//*
	// Generates a new public / private key pair for signing.
	//
	// Stores the private key in the vault, and returns the public key
	GenerateSigningKey(context.Context, *GenerateSigningKeyRequest) (*GenerateSigningKeyResponse, error)
	//*
	// Generates a new public / private key pair for hybrid encryption.
	//
	// Stores the private key in the vault, and returns the public key
	GenerateEncryptionKey(context.Context, *GenerateEncryptionKeyRequest) (*GenerateEncryptionKeyResponse, error)
	//*
	// Registers a KMS key for asymmetric/hybrid encryption.
	//
	// Stores the corresponding public key in the vault, and returns it
	RegisterKmsEncryptionKey(context.Context, *RegisterKmsEncryptionKeyRequest) (*RegisterKmsEncryptionKeyResponse, error)
	//*
	// Registers a KMS key for signing.
	//
	// Stores the corresponding public key in the vault, and returns it
	RegisterKmsSigningKey(context.Context, *RegisterKmsSigningKeyRequest) (*RegisterKmsSigningKeyResponse, error)
	//*
	// Import a public key into the registry in order to provide that Fingerprint -> PublicKey lookups
	//
	// @param: ImportPublicKeyRequest serialized public key to be imported
	// @return: fingerprint and serialized public key of imported public key
	ImportPublicKey(context.Context, *ImportPublicKeyRequest) (*ImportPublicKeyResponse, error)
	//*
	// Lists all public keys matching the supplied filter which are internally cached
	//
	// Any public key returned here can be referenced in topology transaction building
	// by fingerprint.
	ListPublicKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	//*
	// Changes the wrapper key that is used to encrypt private keys when stored
	RotateWrapperKey(context.Context, *RotateWrapperKeyRequest) (*emptypb.Empty, error)
	GetWrapperKeyId(context.Context, *GetWrapperKeyIdRequest) (*GetWrapperKeyIdResponse, error)
	ExportKeyPair(context.Context, *ExportKeyPairRequest) (*ExportKeyPairResponse, error)
	ImportKeyPair(context.Context, *ImportKeyPairRequest) (*ImportKeyPairResponse, error)
	DeleteKeyPair(context.Context, *DeleteKeyPairRequest) (*DeleteKeyPairResponse, error)
	mustEmbedUnimplementedVaultServiceServer()
}

// UnimplementedVaultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVaultServiceServer struct {
}

func (UnimplementedVaultServiceServer) ListMyKeys(context.Context, *ListKeysRequest) (*ListMyKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyKeys not implemented")
}
func (UnimplementedVaultServiceServer) GenerateSigningKey(context.Context, *GenerateSigningKeyRequest) (*GenerateSigningKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSigningKey not implemented")
}
func (UnimplementedVaultServiceServer) GenerateEncryptionKey(context.Context, *GenerateEncryptionKeyRequest) (*GenerateEncryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEncryptionKey not implemented")
}
func (UnimplementedVaultServiceServer) RegisterKmsEncryptionKey(context.Context, *RegisterKmsEncryptionKeyRequest) (*RegisterKmsEncryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKmsEncryptionKey not implemented")
}
func (UnimplementedVaultServiceServer) RegisterKmsSigningKey(context.Context, *RegisterKmsSigningKeyRequest) (*RegisterKmsSigningKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterKmsSigningKey not implemented")
}
func (UnimplementedVaultServiceServer) ImportPublicKey(context.Context, *ImportPublicKeyRequest) (*ImportPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPublicKey not implemented")
}
func (UnimplementedVaultServiceServer) ListPublicKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicKeys not implemented")
}
func (UnimplementedVaultServiceServer) RotateWrapperKey(context.Context, *RotateWrapperKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateWrapperKey not implemented")
}
func (UnimplementedVaultServiceServer) GetWrapperKeyId(context.Context, *GetWrapperKeyIdRequest) (*GetWrapperKeyIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWrapperKeyId not implemented")
}
func (UnimplementedVaultServiceServer) ExportKeyPair(context.Context, *ExportKeyPairRequest) (*ExportKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportKeyPair not implemented")
}
func (UnimplementedVaultServiceServer) ImportKeyPair(context.Context, *ImportKeyPairRequest) (*ImportKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportKeyPair not implemented")
}
func (UnimplementedVaultServiceServer) DeleteKeyPair(context.Context, *DeleteKeyPairRequest) (*DeleteKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyPair not implemented")
}
func (UnimplementedVaultServiceServer) mustEmbedUnimplementedVaultServiceServer() {}

// UnsafeVaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServiceServer will
// result in compilation errors.
type UnsafeVaultServiceServer interface {
	mustEmbedUnimplementedVaultServiceServer()
}

func RegisterVaultServiceServer(s grpc.ServiceRegistrar, srv VaultServiceServer) {
	s.RegisterService(&VaultService_ServiceDesc, srv)
}

func _VaultService_ListMyKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ListMyKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/ListMyKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ListMyKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GenerateSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSigningKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GenerateSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/GenerateSigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GenerateSigningKey(ctx, req.(*GenerateSigningKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GenerateEncryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEncryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GenerateEncryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/GenerateEncryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GenerateEncryptionKey(ctx, req.(*GenerateEncryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_RegisterKmsEncryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterKmsEncryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).RegisterKmsEncryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/RegisterKmsEncryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).RegisterKmsEncryptionKey(ctx, req.(*RegisterKmsEncryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_RegisterKmsSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterKmsSigningKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).RegisterKmsSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/RegisterKmsSigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).RegisterKmsSigningKey(ctx, req.(*RegisterKmsSigningKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_ImportPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ImportPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/ImportPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ImportPublicKey(ctx, req.(*ImportPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_ListPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ListPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/ListPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ListPublicKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_RotateWrapperKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateWrapperKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).RotateWrapperKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/RotateWrapperKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).RotateWrapperKey(ctx, req.(*RotateWrapperKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_GetWrapperKeyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWrapperKeyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).GetWrapperKeyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/GetWrapperKeyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).GetWrapperKeyId(ctx, req.(*GetWrapperKeyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_ExportKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ExportKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/ExportKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ExportKeyPair(ctx, req.(*ExportKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_ImportKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).ImportKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/ImportKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).ImportKeyPair(ctx, req.(*ImportKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_DeleteKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).DeleteKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.crypto.admin.v0.VaultService/DeleteKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).DeleteKeyPair(ctx, req.(*DeleteKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultService_ServiceDesc is the grpc.ServiceDesc for VaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.crypto.admin.v0.VaultService",
	HandlerType: (*VaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMyKeys",
			Handler:    _VaultService_ListMyKeys_Handler,
		},
		{
			MethodName: "GenerateSigningKey",
			Handler:    _VaultService_GenerateSigningKey_Handler,
		},
		{
			MethodName: "GenerateEncryptionKey",
			Handler:    _VaultService_GenerateEncryptionKey_Handler,
		},
		{
			MethodName: "RegisterKmsEncryptionKey",
			Handler:    _VaultService_RegisterKmsEncryptionKey_Handler,
		},
		{
			MethodName: "RegisterKmsSigningKey",
			Handler:    _VaultService_RegisterKmsSigningKey_Handler,
		},
		{
			MethodName: "ImportPublicKey",
			Handler:    _VaultService_ImportPublicKey_Handler,
		},
		{
			MethodName: "ListPublicKeys",
			Handler:    _VaultService_ListPublicKeys_Handler,
		},
		{
			MethodName: "RotateWrapperKey",
			Handler:    _VaultService_RotateWrapperKey_Handler,
		},
		{
			MethodName: "GetWrapperKeyId",
			Handler:    _VaultService_GetWrapperKeyId_Handler,
		},
		{
			MethodName: "ExportKeyPair",
			Handler:    _VaultService_ExportKeyPair_Handler,
		},
		{
			MethodName: "ImportKeyPair",
			Handler:    _VaultService_ImportKeyPair_Handler,
		},
		{
			MethodName: "DeleteKeyPair",
			Handler:    _VaultService_DeleteKeyPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/crypto/admin/v0/vault_service.proto",
}

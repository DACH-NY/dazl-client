// Copyright (c) 2017-2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: com/digitalasset/canton/topology/admin/v1/initialization_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityInitializationServiceXClient is the client API for IdentityInitializationServiceX service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityInitializationServiceXClient interface {
	//*
	// Initialize the node with the unique identifier (can and must be done once)
	//
	// When a node starts for the first time, we need to bind it
	// to a globally unique stable identifier before we can continue with the
	// initialization procedure.
	//
	// This method is only used once during initialization.
	InitId(ctx context.Context, in *InitIdRequest, opts ...grpc.CallOption) (*InitIdResponse, error)
	//*
	// Returns the owner to key transactions together with all necessary certificates, used for onboarding
	GetOnboardingTransactions(ctx context.Context, in *GetOnboardingTransactionsRequest, opts ...grpc.CallOption) (*GetOnboardingTransactionsResponse, error)
	//*
	// Returns the id of the node (or empty if not initialized)
	GetId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIdResponse, error)
	//*
	// Returns the current time of the node (used for testing with static time)
	CurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error)
}

type identityInitializationServiceXClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityInitializationServiceXClient(cc grpc.ClientConnInterface) IdentityInitializationServiceXClient {
	return &identityInitializationServiceXClient{cc}
}

func (c *identityInitializationServiceXClient) InitId(ctx context.Context, in *InitIdRequest, opts ...grpc.CallOption) (*InitIdResponse, error) {
	out := new(InitIdResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/InitId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityInitializationServiceXClient) GetOnboardingTransactions(ctx context.Context, in *GetOnboardingTransactionsRequest, opts ...grpc.CallOption) (*GetOnboardingTransactionsResponse, error) {
	out := new(GetOnboardingTransactionsResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/GetOnboardingTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityInitializationServiceXClient) GetId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIdResponse, error) {
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityInitializationServiceXClient) CurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error) {
	out := new(timestamppb.Timestamp)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/CurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityInitializationServiceXServer is the server API for IdentityInitializationServiceX service.
// All implementations must embed UnimplementedIdentityInitializationServiceXServer
// for forward compatibility
type IdentityInitializationServiceXServer interface {
	//*
	// Initialize the node with the unique identifier (can and must be done once)
	//
	// When a node starts for the first time, we need to bind it
	// to a globally unique stable identifier before we can continue with the
	// initialization procedure.
	//
	// This method is only used once during initialization.
	InitId(context.Context, *InitIdRequest) (*InitIdResponse, error)
	//*
	// Returns the owner to key transactions together with all necessary certificates, used for onboarding
	GetOnboardingTransactions(context.Context, *GetOnboardingTransactionsRequest) (*GetOnboardingTransactionsResponse, error)
	//*
	// Returns the id of the node (or empty if not initialized)
	GetId(context.Context, *emptypb.Empty) (*GetIdResponse, error)
	//*
	// Returns the current time of the node (used for testing with static time)
	CurrentTime(context.Context, *emptypb.Empty) (*timestamppb.Timestamp, error)
	mustEmbedUnimplementedIdentityInitializationServiceXServer()
}

// UnimplementedIdentityInitializationServiceXServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityInitializationServiceXServer struct {
}

func (UnimplementedIdentityInitializationServiceXServer) InitId(context.Context, *InitIdRequest) (*InitIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitId not implemented")
}
func (UnimplementedIdentityInitializationServiceXServer) GetOnboardingTransactions(context.Context, *GetOnboardingTransactionsRequest) (*GetOnboardingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardingTransactions not implemented")
}
func (UnimplementedIdentityInitializationServiceXServer) GetId(context.Context, *emptypb.Empty) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedIdentityInitializationServiceXServer) CurrentTime(context.Context, *emptypb.Empty) (*timestamppb.Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTime not implemented")
}
func (UnimplementedIdentityInitializationServiceXServer) mustEmbedUnimplementedIdentityInitializationServiceXServer() {
}

// UnsafeIdentityInitializationServiceXServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityInitializationServiceXServer will
// result in compilation errors.
type UnsafeIdentityInitializationServiceXServer interface {
	mustEmbedUnimplementedIdentityInitializationServiceXServer()
}

func RegisterIdentityInitializationServiceXServer(s grpc.ServiceRegistrar, srv IdentityInitializationServiceXServer) {
	s.RegisterService(&IdentityInitializationServiceX_ServiceDesc, srv)
}

func _IdentityInitializationServiceX_InitId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceXServer).InitId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/InitId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceXServer).InitId(ctx, req.(*InitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityInitializationServiceX_GetOnboardingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceXServer).GetOnboardingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/GetOnboardingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceXServer).GetOnboardingTransactions(ctx, req.(*GetOnboardingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityInitializationServiceX_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceXServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceXServer).GetId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityInitializationServiceX_CurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityInitializationServiceXServer).CurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX/CurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityInitializationServiceXServer).CurrentTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityInitializationServiceX_ServiceDesc is the grpc.ServiceDesc for IdentityInitializationServiceX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityInitializationServiceX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.topology.admin.v1.IdentityInitializationServiceX",
	HandlerType: (*IdentityInitializationServiceXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitId",
			Handler:    _IdentityInitializationServiceX_InitId_Handler,
		},
		{
			MethodName: "GetOnboardingTransactions",
			Handler:    _IdentityInitializationServiceX_GetOnboardingTransactions_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _IdentityInitializationServiceX_GetId_Handler,
		},
		{
			MethodName: "CurrentTime",
			Handler:    _IdentityInitializationServiceX_CurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/topology/admin/v1/initialization_service.proto",
}

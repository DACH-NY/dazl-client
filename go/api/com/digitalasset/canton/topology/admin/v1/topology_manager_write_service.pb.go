// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.3
// source: com/digitalasset/canton/topology/admin/v1/topology_manager_write_service.proto

package v1

import (
	v2 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/protocol/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthorizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*AuthorizeRequest_Proposal_
	//	*AuthorizeRequest_TransactionHash
	Type isAuthorizeRequest_Type `protobuf_oneof:"type"`
	//*
	// If true: the transaction is only signed if the new signatures will result in the transaction being fully
	// authorized. Otherwise returns as an error.
	// If false: the transaction is signed and the signature distributed. The transaction may still not be fully
	// authorized and remain as a proposal.
	MustFullyAuthorize bool `protobuf:"varint,3,opt,name=must_fully_authorize,json=mustFullyAuthorize,proto3" json:"must_fully_authorize,omitempty"`
	//* Force change even if dangerous
	ForceChange bool `protobuf:"varint,4,opt,name=force_change,json=forceChange,proto3" json:"force_change,omitempty"`
	//*
	// Fingerprint of the keys signing the authorization
	//
	// The signing key is used to identify a particular `NamespaceDelegation` or `IdentifierDelegation` certificate,
	// which is used to justify the given authorization.
	// If optional, it will be auto-determined.
	SignedBy []string `protobuf:"bytes,5,rep,name=signed_by,json=signedBy,proto3" json:"signed_by,omitempty"`
}

func (x *AuthorizeRequest) Reset() {
	*x = AuthorizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequest) ProtoMessage() {}

func (x *AuthorizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescGZIP(), []int{0}
}

func (m *AuthorizeRequest) GetType() isAuthorizeRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AuthorizeRequest) GetProposal() *AuthorizeRequest_Proposal {
	if x, ok := x.GetType().(*AuthorizeRequest_Proposal_); ok {
		return x.Proposal
	}
	return nil
}

func (x *AuthorizeRequest) GetTransactionHash() string {
	if x, ok := x.GetType().(*AuthorizeRequest_TransactionHash); ok {
		return x.TransactionHash
	}
	return ""
}

func (x *AuthorizeRequest) GetMustFullyAuthorize() bool {
	if x != nil {
		return x.MustFullyAuthorize
	}
	return false
}

func (x *AuthorizeRequest) GetForceChange() bool {
	if x != nil {
		return x.ForceChange
	}
	return false
}

func (x *AuthorizeRequest) GetSignedBy() []string {
	if x != nil {
		return x.SignedBy
	}
	return nil
}

type isAuthorizeRequest_Type interface {
	isAuthorizeRequest_Type()
}

type AuthorizeRequest_Proposal_ struct {
	//*
	// Propose a transaction and distribute it.
	// If authorize if the node has enough signing keys
	Proposal *AuthorizeRequest_Proposal `protobuf:"bytes,1,opt,name=proposal,proto3,oneof"`
}

type AuthorizeRequest_TransactionHash struct {
	//*
	// Authorize a transaction, meaning the node needs to be able to fully sign it locally
	TransactionHash string `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3,oneof"`
}

func (*AuthorizeRequest_Proposal_) isAuthorizeRequest_Type() {}

func (*AuthorizeRequest_TransactionHash) isAuthorizeRequest_Type() {}

type AuthorizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* the generated signed topology transaction
	Transaction *v2.SignedTopologyTransactionX `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *AuthorizeResponse) Reset() {
	*x = AuthorizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeResponse) ProtoMessage() {}

func (x *AuthorizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescGZIP(), []int{1}
}

func (x *AuthorizeResponse) GetTransaction() *v2.SignedTopologyTransactionX {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type AddTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*v2.SignedTopologyTransactionX `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	ForceChange  bool                             `protobuf:"varint,2,opt,name=force_change,json=forceChange,proto3" json:"force_change,omitempty"`
}

func (x *AddTransactionsRequest) Reset() {
	*x = AddTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionsRequest) ProtoMessage() {}

func (x *AddTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionsRequest.ProtoReflect.Descriptor instead.
func (*AddTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescGZIP(), []int{2}
}

func (x *AddTransactionsRequest) GetTransactions() []*v2.SignedTopologyTransactionX {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *AddTransactionsRequest) GetForceChange() bool {
	if x != nil {
		return x.ForceChange
	}
	return false
}

type AddTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTransactionsResponse) Reset() {
	*x = AddTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionsResponse) ProtoMessage() {}

func (x *AddTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionsResponse.ProtoReflect.Descriptor instead.
func (*AddTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescGZIP(), []int{3}
}

type AuthorizeRequest_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* Replace / Remove
	Change v2.TopologyChangeOpX `protobuf:"varint,1,opt,name=change,proto3,enum=com.digitalasset.canton.protocol.v2.TopologyChangeOpX" json:"change,omitempty"`
	//* Optionally, the serial number of this request (auto-determined if omitted)
	Serial uint32 `protobuf:"varint,2,opt,name=serial,proto3" json:"serial,omitempty"`
	//* The mapping to be authorized
	Mapping *v2.TopologyMappingX `protobuf:"bytes,3,opt,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *AuthorizeRequest_Proposal) Reset() {
	*x = AuthorizeRequest_Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeRequest_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeRequest_Proposal) ProtoMessage() {}

func (x *AuthorizeRequest_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeRequest_Proposal.ProtoReflect.Descriptor instead.
func (*AuthorizeRequest_Proposal) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AuthorizeRequest_Proposal) GetChange() v2.TopologyChangeOpX {
	if x != nil {
		return x.Change
	}
	return v2.TopologyChangeOpX(0)
}

func (x *AuthorizeRequest_Proposal) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *AuthorizeRequest_Proposal) GetMapping() *v2.TopologyMappingX {
	if x != nil {
		return x.Mapping
	}
	return nil
}

var File_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDesc = []byte{
	0x0a, 0x4e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe3, 0x03, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x75, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x1a, 0xc3, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x58, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x58, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc2, 0x02, 0x0a, 0x1c,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x58, 0x12, 0x86, 0x01, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a,
	0x6c, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x37, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescData = file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDesc
)

func file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDescData
}

var file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_goTypes = []interface{}{
	(*AuthorizeRequest)(nil),              // 0: com.digitalasset.canton.topology.admin.v1.AuthorizeRequest
	(*AuthorizeResponse)(nil),             // 1: com.digitalasset.canton.topology.admin.v1.AuthorizeResponse
	(*AddTransactionsRequest)(nil),        // 2: com.digitalasset.canton.topology.admin.v1.AddTransactionsRequest
	(*AddTransactionsResponse)(nil),       // 3: com.digitalasset.canton.topology.admin.v1.AddTransactionsResponse
	(*AuthorizeRequest_Proposal)(nil),     // 4: com.digitalasset.canton.topology.admin.v1.AuthorizeRequest.Proposal
	(*v2.SignedTopologyTransactionX)(nil), // 5: com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX
	(v2.TopologyChangeOpX)(0),             // 6: com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	(*v2.TopologyMappingX)(nil),           // 7: com.digitalasset.canton.protocol.v2.TopologyMappingX
}
var file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_depIdxs = []int32{
	4, // 0: com.digitalasset.canton.topology.admin.v1.AuthorizeRequest.proposal:type_name -> com.digitalasset.canton.topology.admin.v1.AuthorizeRequest.Proposal
	5, // 1: com.digitalasset.canton.topology.admin.v1.AuthorizeResponse.transaction:type_name -> com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX
	5, // 2: com.digitalasset.canton.topology.admin.v1.AddTransactionsRequest.transactions:type_name -> com.digitalasset.canton.protocol.v2.SignedTopologyTransactionX
	6, // 3: com.digitalasset.canton.topology.admin.v1.AuthorizeRequest.Proposal.change:type_name -> com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	7, // 4: com.digitalasset.canton.topology.admin.v1.AuthorizeRequest.Proposal.mapping:type_name -> com.digitalasset.canton.protocol.v2.TopologyMappingX
	0, // 5: com.digitalasset.canton.topology.admin.v1.TopologyManagerWriteServiceX.Authorize:input_type -> com.digitalasset.canton.topology.admin.v1.AuthorizeRequest
	2, // 6: com.digitalasset.canton.topology.admin.v1.TopologyManagerWriteServiceX.AddTransactions:input_type -> com.digitalasset.canton.topology.admin.v1.AddTransactionsRequest
	1, // 7: com.digitalasset.canton.topology.admin.v1.TopologyManagerWriteServiceX.Authorize:output_type -> com.digitalasset.canton.topology.admin.v1.AuthorizeResponse
	3, // 8: com.digitalasset.canton.topology.admin.v1.TopologyManagerWriteServiceX.AddTransactions:output_type -> com.digitalasset.canton.topology.admin.v1.AddTransactionsResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_init()
}
func file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_init() {
	if File_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeRequest_Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AuthorizeRequest_Proposal_)(nil),
		(*AuthorizeRequest_TransactionHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto = out.File
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_rawDesc = nil
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_goTypes = nil
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_write_service_proto_depIdxs = nil
}

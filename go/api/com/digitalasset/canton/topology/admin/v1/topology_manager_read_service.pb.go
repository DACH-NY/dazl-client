// Copyright (c) 2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.24.3
// source: com/digitalasset/canton/topology/admin/v1/topology_manager_read_service.proto

package v1

import (
	v0 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/protocol/v0"
	v2 "github.com/digital-asset/dazl-client/v7/go/api/com/digitalasset/canton/protocol/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTrafficStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterMember string     `protobuf:"bytes,2,opt,name=filter_member,json=filterMember,proto3" json:"filter_member,omitempty"`
}

func (x *ListTrafficStateRequest) Reset() {
	*x = ListTrafficStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrafficStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrafficStateRequest) ProtoMessage() {}

func (x *ListTrafficStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrafficStateRequest.ProtoReflect.Descriptor instead.
func (*ListTrafficStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListTrafficStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListTrafficStateRequest) GetFilterMember() string {
	if x != nil {
		return x.FilterMember
	}
	return ""
}

type ListTrafficStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListTrafficStateResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListTrafficStateResult) Reset() {
	*x = ListTrafficStateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrafficStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrafficStateResult) ProtoMessage() {}

func (x *ListTrafficStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrafficStateResult.ProtoReflect.Descriptor instead.
func (*ListTrafficStateResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListTrafficStateResult) GetResults() []*ListTrafficStateResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BaseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterStore string `protobuf:"bytes,1,opt,name=filter_store,json=filterStore,proto3" json:"filter_store,omitempty"`
	// whether to query only for proposals instead of approved topology mappings
	Proposals bool                 `protobuf:"varint,2,opt,name=proposals,proto3" json:"proposals,omitempty"`
	Operation v2.TopologyChangeOpX `protobuf:"varint,3,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v2.TopologyChangeOpX" json:"operation,omitempty"` // TODO(#11255) is that necessary????
	//* if true, then we'll filter the results according to above defined operation
	FilterOperation bool `protobuf:"varint,4,opt,name=filter_operation,json=filterOperation,proto3" json:"filter_operation,omitempty"`
	// Types that are assignable to TimeQuery:
	//	*BaseQuery_Snapshot
	//	*BaseQuery_HeadState
	//	*BaseQuery_Range
	TimeQuery       isBaseQuery_TimeQuery   `protobuf_oneof:"time_query"`
	FilterSignedKey string                  `protobuf:"bytes,8,opt,name=filter_signed_key,json=filterSignedKey,proto3" json:"filter_signed_key,omitempty"`
	ProtocolVersion *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *BaseQuery) Reset() {
	*x = BaseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseQuery) ProtoMessage() {}

func (x *BaseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseQuery.ProtoReflect.Descriptor instead.
func (*BaseQuery) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{2}
}

func (x *BaseQuery) GetFilterStore() string {
	if x != nil {
		return x.FilterStore
	}
	return ""
}

func (x *BaseQuery) GetProposals() bool {
	if x != nil {
		return x.Proposals
	}
	return false
}

func (x *BaseQuery) GetOperation() v2.TopologyChangeOpX {
	if x != nil {
		return x.Operation
	}
	return v2.TopologyChangeOpX(0)
}

func (x *BaseQuery) GetFilterOperation() bool {
	if x != nil {
		return x.FilterOperation
	}
	return false
}

func (m *BaseQuery) GetTimeQuery() isBaseQuery_TimeQuery {
	if m != nil {
		return m.TimeQuery
	}
	return nil
}

func (x *BaseQuery) GetSnapshot() *timestamppb.Timestamp {
	if x, ok := x.GetTimeQuery().(*BaseQuery_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (x *BaseQuery) GetHeadState() *emptypb.Empty {
	if x, ok := x.GetTimeQuery().(*BaseQuery_HeadState); ok {
		return x.HeadState
	}
	return nil
}

func (x *BaseQuery) GetRange() *BaseQuery_TimeRange {
	if x, ok := x.GetTimeQuery().(*BaseQuery_Range); ok {
		return x.Range
	}
	return nil
}

func (x *BaseQuery) GetFilterSignedKey() string {
	if x != nil {
		return x.FilterSignedKey
	}
	return ""
}

func (x *BaseQuery) GetProtocolVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

type isBaseQuery_TimeQuery interface {
	isBaseQuery_TimeQuery()
}

type BaseQuery_Snapshot struct {
	Snapshot *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=snapshot,proto3,oneof"`
}

type BaseQuery_HeadState struct {
	HeadState *emptypb.Empty `protobuf:"bytes,6,opt,name=head_state,json=headState,proto3,oneof"`
}

type BaseQuery_Range struct {
	Range *BaseQuery_TimeRange `protobuf:"bytes,7,opt,name=range,proto3,oneof"`
}

func (*BaseQuery_Snapshot) isBaseQuery_TimeQuery() {}

func (*BaseQuery_HeadState) isBaseQuery_TimeQuery() {}

func (*BaseQuery_Range) isBaseQuery_TimeQuery() {}

type BaseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Store                string                 `protobuf:"bytes,1,opt,name=store,proto3" json:"store,omitempty"`
	Sequenced            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sequenced,proto3" json:"sequenced,omitempty"`
	ValidFrom            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	ValidUntil           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	Operation            v2.TopologyChangeOpX   `protobuf:"varint,5,opt,name=operation,proto3,enum=com.digitalasset.canton.protocol.v2.TopologyChangeOpX" json:"operation,omitempty"`
	TransactionHash      []byte                 `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Serial               int32                  `protobuf:"varint,7,opt,name=serial,proto3" json:"serial,omitempty"`
	SignedByFingerprints []string               `protobuf:"bytes,8,rep,name=signed_by_fingerprints,json=signedByFingerprints,proto3" json:"signed_by_fingerprints,omitempty"`
}

func (x *BaseResult) Reset() {
	*x = BaseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResult) ProtoMessage() {}

func (x *BaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResult.ProtoReflect.Descriptor instead.
func (*BaseResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{3}
}

func (x *BaseResult) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

func (x *BaseResult) GetSequenced() *timestamppb.Timestamp {
	if x != nil {
		return x.Sequenced
	}
	return nil
}

func (x *BaseResult) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *BaseResult) GetValidUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntil
	}
	return nil
}

func (x *BaseResult) GetOperation() v2.TopologyChangeOpX {
	if x != nil {
		return x.Operation
	}
	return v2.TopologyChangeOpX(0)
}

func (x *BaseResult) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

func (x *BaseResult) GetSerial() int32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *BaseResult) GetSignedByFingerprints() []string {
	if x != nil {
		return x.SignedByFingerprints
	}
	return nil
}

type ListNamespaceDelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery                  *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterNamespace            string     `protobuf:"bytes,2,opt,name=filter_namespace,json=filterNamespace,proto3" json:"filter_namespace,omitempty"`
	FilterTargetKeyFingerprint string     `protobuf:"bytes,3,opt,name=filter_target_key_fingerprint,json=filterTargetKeyFingerprint,proto3" json:"filter_target_key_fingerprint,omitempty"`
}

func (x *ListNamespaceDelegationRequest) Reset() {
	*x = ListNamespaceDelegationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceDelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDelegationRequest) ProtoMessage() {}

func (x *ListNamespaceDelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDelegationRequest.ProtoReflect.Descriptor instead.
func (*ListNamespaceDelegationRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListNamespaceDelegationRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListNamespaceDelegationRequest) GetFilterNamespace() string {
	if x != nil {
		return x.FilterNamespace
	}
	return ""
}

func (x *ListNamespaceDelegationRequest) GetFilterTargetKeyFingerprint() string {
	if x != nil {
		return x.FilterTargetKeyFingerprint
	}
	return ""
}

type ListNamespaceDelegationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListNamespaceDelegationResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListNamespaceDelegationResult) Reset() {
	*x = ListNamespaceDelegationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceDelegationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDelegationResult) ProtoMessage() {}

func (x *ListNamespaceDelegationResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDelegationResult.ProtoReflect.Descriptor instead.
func (*ListNamespaceDelegationResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListNamespaceDelegationResult) GetResults() []*ListNamespaceDelegationResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListUnionspaceDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery       *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterNamespace string     `protobuf:"bytes,2,opt,name=filter_namespace,json=filterNamespace,proto3" json:"filter_namespace,omitempty"`
}

func (x *ListUnionspaceDefinitionRequest) Reset() {
	*x = ListUnionspaceDefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionspaceDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionspaceDefinitionRequest) ProtoMessage() {}

func (x *ListUnionspaceDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionspaceDefinitionRequest.ProtoReflect.Descriptor instead.
func (*ListUnionspaceDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListUnionspaceDefinitionRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListUnionspaceDefinitionRequest) GetFilterNamespace() string {
	if x != nil {
		return x.FilterNamespace
	}
	return ""
}

type ListUnionspaceDefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListUnionspaceDefinitionResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListUnionspaceDefinitionResult) Reset() {
	*x = ListUnionspaceDefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionspaceDefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionspaceDefinitionResult) ProtoMessage() {}

func (x *ListUnionspaceDefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionspaceDefinitionResult.ProtoReflect.Descriptor instead.
func (*ListUnionspaceDefinitionResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListUnionspaceDefinitionResult) GetResults() []*ListUnionspaceDefinitionResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListIdentifierDelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery                  *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid                  string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
	FilterTargetKeyFingerprint string     `protobuf:"bytes,3,opt,name=filter_target_key_fingerprint,json=filterTargetKeyFingerprint,proto3" json:"filter_target_key_fingerprint,omitempty"`
}

func (x *ListIdentifierDelegationRequest) Reset() {
	*x = ListIdentifierDelegationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIdentifierDelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentifierDelegationRequest) ProtoMessage() {}

func (x *ListIdentifierDelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentifierDelegationRequest.ProtoReflect.Descriptor instead.
func (*ListIdentifierDelegationRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListIdentifierDelegationRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListIdentifierDelegationRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

func (x *ListIdentifierDelegationRequest) GetFilterTargetKeyFingerprint() string {
	if x != nil {
		return x.FilterTargetKeyFingerprint
	}
	return ""
}

type ListIdentifierDelegationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListIdentifierDelegationResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListIdentifierDelegationResult) Reset() {
	*x = ListIdentifierDelegationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIdentifierDelegationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentifierDelegationResult) ProtoMessage() {}

func (x *ListIdentifierDelegationResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentifierDelegationResult.ProtoReflect.Descriptor instead.
func (*ListIdentifierDelegationResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListIdentifierDelegationResult) GetResults() []*ListIdentifierDelegationResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListOwnerToKeyMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery          *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterKeyOwnerType string     `protobuf:"bytes,2,opt,name=filter_key_owner_type,json=filterKeyOwnerType,proto3" json:"filter_key_owner_type,omitempty"`
	FilterKeyOwnerUid  string     `protobuf:"bytes,3,opt,name=filter_key_owner_uid,json=filterKeyOwnerUid,proto3" json:"filter_key_owner_uid,omitempty"`
}

func (x *ListOwnerToKeyMappingRequest) Reset() {
	*x = ListOwnerToKeyMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnerToKeyMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnerToKeyMappingRequest) ProtoMessage() {}

func (x *ListOwnerToKeyMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnerToKeyMappingRequest.ProtoReflect.Descriptor instead.
func (*ListOwnerToKeyMappingRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListOwnerToKeyMappingRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListOwnerToKeyMappingRequest) GetFilterKeyOwnerType() string {
	if x != nil {
		return x.FilterKeyOwnerType
	}
	return ""
}

func (x *ListOwnerToKeyMappingRequest) GetFilterKeyOwnerUid() string {
	if x != nil {
		return x.FilterKeyOwnerUid
	}
	return ""
}

type ListOwnerToKeyMappingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListOwnerToKeyMappingResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListOwnerToKeyMappingResult) Reset() {
	*x = ListOwnerToKeyMappingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnerToKeyMappingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnerToKeyMappingResult) ProtoMessage() {}

func (x *ListOwnerToKeyMappingResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnerToKeyMappingResult.ProtoReflect.Descriptor instead.
func (*ListOwnerToKeyMappingResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListOwnerToKeyMappingResult) GetResults() []*ListOwnerToKeyMappingResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListDomainTrustCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
}

func (x *ListDomainTrustCertificateRequest) Reset() {
	*x = ListDomainTrustCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainTrustCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainTrustCertificateRequest) ProtoMessage() {}

func (x *ListDomainTrustCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainTrustCertificateRequest.ProtoReflect.Descriptor instead.
func (*ListDomainTrustCertificateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListDomainTrustCertificateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListDomainTrustCertificateRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListDomainTrustCertificateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListDomainTrustCertificateResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListDomainTrustCertificateResult) Reset() {
	*x = ListDomainTrustCertificateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainTrustCertificateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainTrustCertificateResult) ProtoMessage() {}

func (x *ListDomainTrustCertificateResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainTrustCertificateResult.ProtoReflect.Descriptor instead.
func (*ListDomainTrustCertificateResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListDomainTrustCertificateResult) GetResults() []*ListDomainTrustCertificateResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListParticipantDomainPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
}

func (x *ListParticipantDomainPermissionRequest) Reset() {
	*x = ListParticipantDomainPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParticipantDomainPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantDomainPermissionRequest) ProtoMessage() {}

func (x *ListParticipantDomainPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantDomainPermissionRequest.ProtoReflect.Descriptor instead.
func (*ListParticipantDomainPermissionRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListParticipantDomainPermissionRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListParticipantDomainPermissionRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListParticipantDomainPermissionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListParticipantDomainPermissionResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListParticipantDomainPermissionResult) Reset() {
	*x = ListParticipantDomainPermissionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParticipantDomainPermissionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantDomainPermissionResult) ProtoMessage() {}

func (x *ListParticipantDomainPermissionResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantDomainPermissionResult.ProtoReflect.Descriptor instead.
func (*ListParticipantDomainPermissionResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListParticipantDomainPermissionResult) GetResults() []*ListParticipantDomainPermissionResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPartyHostingLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterUid string     `protobuf:"bytes,2,opt,name=filter_uid,json=filterUid,proto3" json:"filter_uid,omitempty"`
}

func (x *ListPartyHostingLimitsRequest) Reset() {
	*x = ListPartyHostingLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartyHostingLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyHostingLimitsRequest) ProtoMessage() {}

func (x *ListPartyHostingLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyHostingLimitsRequest.ProtoReflect.Descriptor instead.
func (*ListPartyHostingLimitsRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListPartyHostingLimitsRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPartyHostingLimitsRequest) GetFilterUid() string {
	if x != nil {
		return x.FilterUid
	}
	return ""
}

type ListPartyHostingLimitsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPartyHostingLimitsResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPartyHostingLimitsResult) Reset() {
	*x = ListPartyHostingLimitsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartyHostingLimitsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyHostingLimitsResult) ProtoMessage() {}

func (x *ListPartyHostingLimitsResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyHostingLimitsResult.ProtoReflect.Descriptor instead.
func (*ListPartyHostingLimitsResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListPartyHostingLimitsResult) GetResults() []*ListPartyHostingLimitsResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListVettedPackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery         *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParticipant string     `protobuf:"bytes,2,opt,name=filter_participant,json=filterParticipant,proto3" json:"filter_participant,omitempty"`
}

func (x *ListVettedPackagesRequest) Reset() {
	*x = ListVettedPackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVettedPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVettedPackagesRequest) ProtoMessage() {}

func (x *ListVettedPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVettedPackagesRequest.ProtoReflect.Descriptor instead.
func (*ListVettedPackagesRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListVettedPackagesRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListVettedPackagesRequest) GetFilterParticipant() string {
	if x != nil {
		return x.FilterParticipant
	}
	return ""
}

type ListVettedPackagesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListVettedPackagesResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListVettedPackagesResult) Reset() {
	*x = ListVettedPackagesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVettedPackagesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVettedPackagesResult) ProtoMessage() {}

func (x *ListVettedPackagesResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVettedPackagesResult.ProtoReflect.Descriptor instead.
func (*ListVettedPackagesResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListVettedPackagesResult) GetResults() []*ListVettedPackagesResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPartyToParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery         *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParty       string     `protobuf:"bytes,2,opt,name=filter_party,json=filterParty,proto3" json:"filter_party,omitempty"`
	FilterParticipant string     `protobuf:"bytes,3,opt,name=filter_participant,json=filterParticipant,proto3" json:"filter_participant,omitempty"`
}

func (x *ListPartyToParticipantRequest) Reset() {
	*x = ListPartyToParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartyToParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToParticipantRequest) ProtoMessage() {}

func (x *ListPartyToParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToParticipantRequest.ProtoReflect.Descriptor instead.
func (*ListPartyToParticipantRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListPartyToParticipantRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPartyToParticipantRequest) GetFilterParty() string {
	if x != nil {
		return x.FilterParty
	}
	return ""
}

func (x *ListPartyToParticipantRequest) GetFilterParticipant() string {
	if x != nil {
		return x.FilterParticipant
	}
	return ""
}

type ListPartyToParticipantResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPartyToParticipantResult_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPartyToParticipantResult) Reset() {
	*x = ListPartyToParticipantResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartyToParticipantResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToParticipantResult) ProtoMessage() {}

func (x *ListPartyToParticipantResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToParticipantResult.ProtoReflect.Descriptor instead.
func (*ListPartyToParticipantResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListPartyToParticipantResult) GetResults() []*ListPartyToParticipantResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListAuthorityOfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery   *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterParty string     `protobuf:"bytes,2,opt,name=filter_party,json=filterParty,proto3" json:"filter_party,omitempty"`
}

func (x *ListAuthorityOfRequest) Reset() {
	*x = ListAuthorityOfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthorityOfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorityOfRequest) ProtoMessage() {}

func (x *ListAuthorityOfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorityOfRequest.ProtoReflect.Descriptor instead.
func (*ListAuthorityOfRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListAuthorityOfRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListAuthorityOfRequest) GetFilterParty() string {
	if x != nil {
		return x.FilterParty
	}
	return ""
}

type ListAuthorityOfResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListAuthorityOfResult_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListAuthorityOfResult) Reset() {
	*x = ListAuthorityOfResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthorityOfResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorityOfResult) ProtoMessage() {}

func (x *ListAuthorityOfResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorityOfResult.ProtoReflect.Descriptor instead.
func (*ListAuthorityOfResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListAuthorityOfResult) GetResults() []*ListAuthorityOfResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListDomainParametersStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListDomainParametersStateRequest) Reset() {
	*x = ListDomainParametersStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainParametersStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainParametersStateRequest) ProtoMessage() {}

func (x *ListDomainParametersStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainParametersStateRequest.ProtoReflect.Descriptor instead.
func (*ListDomainParametersStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListDomainParametersStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListDomainParametersStateRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListDomainParametersStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListDomainParametersStateResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListDomainParametersStateResult) Reset() {
	*x = ListDomainParametersStateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainParametersStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainParametersStateResult) ProtoMessage() {}

func (x *ListDomainParametersStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainParametersStateResult.ProtoReflect.Descriptor instead.
func (*ListDomainParametersStateResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListDomainParametersStateResult) GetResults() []*ListDomainParametersStateResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListMediatorDomainStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListMediatorDomainStateRequest) Reset() {
	*x = ListMediatorDomainStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMediatorDomainStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediatorDomainStateRequest) ProtoMessage() {}

func (x *ListMediatorDomainStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediatorDomainStateRequest.ProtoReflect.Descriptor instead.
func (*ListMediatorDomainStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListMediatorDomainStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListMediatorDomainStateRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListMediatorDomainStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListMediatorDomainStateResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListMediatorDomainStateResult) Reset() {
	*x = ListMediatorDomainStateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMediatorDomainStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediatorDomainStateResult) ProtoMessage() {}

func (x *ListMediatorDomainStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediatorDomainStateResult.ProtoReflect.Descriptor instead.
func (*ListMediatorDomainStateResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{27}
}

func (x *ListMediatorDomainStateResult) GetResults() []*ListMediatorDomainStateResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListSequencerDomainStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListSequencerDomainStateRequest) Reset() {
	*x = ListSequencerDomainStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSequencerDomainStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSequencerDomainStateRequest) ProtoMessage() {}

func (x *ListSequencerDomainStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSequencerDomainStateRequest.ProtoReflect.Descriptor instead.
func (*ListSequencerDomainStateRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListSequencerDomainStateRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListSequencerDomainStateRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListSequencerDomainStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListSequencerDomainStateResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListSequencerDomainStateResult) Reset() {
	*x = ListSequencerDomainStateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSequencerDomainStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSequencerDomainStateResult) ProtoMessage() {}

func (x *ListSequencerDomainStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSequencerDomainStateResult.ProtoReflect.Descriptor instead.
func (*ListSequencerDomainStateResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListSequencerDomainStateResult) GetResults() []*ListSequencerDomainStateResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPurgeTopologyTransactionXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery    *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
	FilterDomain string     `protobuf:"bytes,2,opt,name=filter_domain,json=filterDomain,proto3" json:"filter_domain,omitempty"`
}

func (x *ListPurgeTopologyTransactionXRequest) Reset() {
	*x = ListPurgeTopologyTransactionXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPurgeTopologyTransactionXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPurgeTopologyTransactionXRequest) ProtoMessage() {}

func (x *ListPurgeTopologyTransactionXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPurgeTopologyTransactionXRequest.ProtoReflect.Descriptor instead.
func (*ListPurgeTopologyTransactionXRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListPurgeTopologyTransactionXRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

func (x *ListPurgeTopologyTransactionXRequest) GetFilterDomain() string {
	if x != nil {
		return x.FilterDomain
	}
	return ""
}

type ListPurgeTopologyTransactionXResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListPurgeTopologyTransactionXResult_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPurgeTopologyTransactionXResult) Reset() {
	*x = ListPurgeTopologyTransactionXResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPurgeTopologyTransactionXResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPurgeTopologyTransactionXResult) ProtoMessage() {}

func (x *ListPurgeTopologyTransactionXResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPurgeTopologyTransactionXResult.ProtoReflect.Descriptor instead.
func (*ListPurgeTopologyTransactionXResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListPurgeTopologyTransactionXResult) GetResults() []*ListPurgeTopologyTransactionXResult_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListAvailableStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAvailableStoresRequest) Reset() {
	*x = ListAvailableStoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableStoresRequest) ProtoMessage() {}

func (x *ListAvailableStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableStoresRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableStoresRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{32}
}

type ListAvailableStoresResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreIds []string `protobuf:"bytes,1,rep,name=store_ids,json=storeIds,proto3" json:"store_ids,omitempty"`
}

func (x *ListAvailableStoresResult) Reset() {
	*x = ListAvailableStoresResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableStoresResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableStoresResult) ProtoMessage() {}

func (x *ListAvailableStoresResult) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableStoresResult.ProtoReflect.Descriptor instead.
func (*ListAvailableStoresResult) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{33}
}

func (x *ListAvailableStoresResult) GetStoreIds() []string {
	if x != nil {
		return x.StoreIds
	}
	return nil
}

type ListAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseQuery *BaseQuery `protobuf:"bytes,1,opt,name=base_query,json=baseQuery,proto3" json:"base_query,omitempty"`
}

func (x *ListAllRequest) Reset() {
	*x = ListAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllRequest) ProtoMessage() {}

func (x *ListAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllRequest.ProtoReflect.Descriptor instead.
func (*ListAllRequest) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{34}
}

func (x *ListAllRequest) GetBaseQuery() *BaseQuery {
	if x != nil {
		return x.BaseQuery
	}
	return nil
}

type ListAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *v0.TopologyTransactions `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ListAllResponse) Reset() {
	*x = ListAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllResponse) ProtoMessage() {}

func (x *ListAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllResponse.ProtoReflect.Descriptor instead.
func (*ListAllResponse) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{35}
}

func (x *ListAllResponse) GetResult() *v0.TopologyTransactions {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListTrafficStateResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult              `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.TrafficControlStateX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListTrafficStateResult_Result) Reset() {
	*x = ListTrafficStateResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrafficStateResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrafficStateResult_Result) ProtoMessage() {}

func (x *ListTrafficStateResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrafficStateResult_Result.ProtoReflect.Descriptor instead.
func (*ListTrafficStateResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListTrafficStateResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListTrafficStateResult_Result) GetItem() *v2.TrafficControlStateX {
	if x != nil {
		return x.Item
	}
	return nil
}

type BaseQuery_TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
}

func (x *BaseQuery_TimeRange) Reset() {
	*x = BaseQuery_TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseQuery_TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseQuery_TimeRange) ProtoMessage() {}

func (x *BaseQuery_TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseQuery_TimeRange.ProtoReflect.Descriptor instead.
func (*BaseQuery_TimeRange) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BaseQuery_TimeRange) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BaseQuery_TimeRange) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

type ListNamespaceDelegationResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult              `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.NamespaceDelegationX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListNamespaceDelegationResult_Result) Reset() {
	*x = ListNamespaceDelegationResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespaceDelegationResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceDelegationResult_Result) ProtoMessage() {}

func (x *ListNamespaceDelegationResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceDelegationResult_Result.ProtoReflect.Descriptor instead.
func (*ListNamespaceDelegationResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListNamespaceDelegationResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListNamespaceDelegationResult_Result) GetItem() *v2.NamespaceDelegationX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListUnionspaceDefinitionResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult               `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.UnionspaceDefinitionX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListUnionspaceDefinitionResult_Result) Reset() {
	*x = ListUnionspaceDefinitionResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnionspaceDefinitionResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnionspaceDefinitionResult_Result) ProtoMessage() {}

func (x *ListUnionspaceDefinitionResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnionspaceDefinitionResult_Result.ProtoReflect.Descriptor instead.
func (*ListUnionspaceDefinitionResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListUnionspaceDefinitionResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListUnionspaceDefinitionResult_Result) GetItem() *v2.UnionspaceDefinitionX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListIdentifierDelegationResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult               `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.IdentifierDelegationX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListIdentifierDelegationResult_Result) Reset() {
	*x = ListIdentifierDelegationResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIdentifierDelegationResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentifierDelegationResult_Result) ProtoMessage() {}

func (x *ListIdentifierDelegationResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentifierDelegationResult_Result.ProtoReflect.Descriptor instead.
func (*ListIdentifierDelegationResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListIdentifierDelegationResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListIdentifierDelegationResult_Result) GetItem() *v2.IdentifierDelegationX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListOwnerToKeyMappingResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.OwnerToKeyMappingX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListOwnerToKeyMappingResult_Result) Reset() {
	*x = ListOwnerToKeyMappingResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnerToKeyMappingResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnerToKeyMappingResult_Result) ProtoMessage() {}

func (x *ListOwnerToKeyMappingResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnerToKeyMappingResult_Result.ProtoReflect.Descriptor instead.
func (*ListOwnerToKeyMappingResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListOwnerToKeyMappingResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListOwnerToKeyMappingResult_Result) GetItem() *v2.OwnerToKeyMappingX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListDomainTrustCertificateResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.DomainTrustCertificateX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListDomainTrustCertificateResult_Result) Reset() {
	*x = ListDomainTrustCertificateResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainTrustCertificateResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainTrustCertificateResult_Result) ProtoMessage() {}

func (x *ListDomainTrustCertificateResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainTrustCertificateResult_Result.ProtoReflect.Descriptor instead.
func (*ListDomainTrustCertificateResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListDomainTrustCertificateResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListDomainTrustCertificateResult_Result) GetItem() *v2.DomainTrustCertificateX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListParticipantDomainPermissionResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                      `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.ParticipantDomainPermissionX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListParticipantDomainPermissionResult_Result) Reset() {
	*x = ListParticipantDomainPermissionResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParticipantDomainPermissionResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParticipantDomainPermissionResult_Result) ProtoMessage() {}

func (x *ListParticipantDomainPermissionResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParticipantDomainPermissionResult_Result.ProtoReflect.Descriptor instead.
func (*ListParticipantDomainPermissionResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ListParticipantDomainPermissionResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListParticipantDomainPermissionResult_Result) GetItem() *v2.ParticipantDomainPermissionX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPartyHostingLimitsResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult             `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.PartyHostingLimitsX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPartyHostingLimitsResult_Result) Reset() {
	*x = ListPartyHostingLimitsResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartyHostingLimitsResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyHostingLimitsResult_Result) ProtoMessage() {}

func (x *ListPartyHostingLimitsResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyHostingLimitsResult_Result.ProtoReflect.Descriptor instead.
func (*ListPartyHostingLimitsResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ListPartyHostingLimitsResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPartyHostingLimitsResult_Result) GetItem() *v2.PartyHostingLimitsX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListVettedPackagesResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult         `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.VettedPackagesX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListVettedPackagesResult_Result) Reset() {
	*x = ListVettedPackagesResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVettedPackagesResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVettedPackagesResult_Result) ProtoMessage() {}

func (x *ListVettedPackagesResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVettedPackagesResult_Result.ProtoReflect.Descriptor instead.
func (*ListVettedPackagesResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ListVettedPackagesResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListVettedPackagesResult_Result) GetItem() *v2.VettedPackagesX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPartyToParticipantResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult             `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.PartyToParticipantX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPartyToParticipantResult_Result) Reset() {
	*x = ListPartyToParticipantResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPartyToParticipantResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPartyToParticipantResult_Result) ProtoMessage() {}

func (x *ListPartyToParticipantResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPartyToParticipantResult_Result.ProtoReflect.Descriptor instead.
func (*ListPartyToParticipantResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{21, 0}
}

func (x *ListPartyToParticipantResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPartyToParticipantResult_Result) GetItem() *v2.PartyToParticipantX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListAuthorityOfResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult      `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.AuthorityOfX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListAuthorityOfResult_Result) Reset() {
	*x = ListAuthorityOfResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthorityOfResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthorityOfResult_Result) ProtoMessage() {}

func (x *ListAuthorityOfResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthorityOfResult_Result.ProtoReflect.Descriptor instead.
func (*ListAuthorityOfResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ListAuthorityOfResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListAuthorityOfResult_Result) GetItem() *v2.AuthorityOfX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListDomainParametersStateResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.DynamicDomainParametersX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListDomainParametersStateResult_Result) Reset() {
	*x = ListDomainParametersStateResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainParametersStateResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainParametersStateResult_Result) ProtoMessage() {}

func (x *ListDomainParametersStateResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainParametersStateResult_Result.ProtoReflect.Descriptor instead.
func (*ListDomainParametersStateResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ListDomainParametersStateResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListDomainParametersStateResult_Result) GetItem() *v2.DynamicDomainParametersX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListMediatorDomainStateResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult              `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.MediatorDomainStateX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListMediatorDomainStateResult_Result) Reset() {
	*x = ListMediatorDomainStateResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMediatorDomainStateResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMediatorDomainStateResult_Result) ProtoMessage() {}

func (x *ListMediatorDomainStateResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMediatorDomainStateResult_Result.ProtoReflect.Descriptor instead.
func (*ListMediatorDomainStateResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ListMediatorDomainStateResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListMediatorDomainStateResult_Result) GetItem() *v2.MediatorDomainStateX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListSequencerDomainStateResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult               `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.SequencerDomainStateX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListSequencerDomainStateResult_Result) Reset() {
	*x = ListSequencerDomainStateResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSequencerDomainStateResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSequencerDomainStateResult_Result) ProtoMessage() {}

func (x *ListSequencerDomainStateResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSequencerDomainStateResult_Result.ProtoReflect.Descriptor instead.
func (*ListSequencerDomainStateResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ListSequencerDomainStateResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListSequencerDomainStateResult_Result) GetItem() *v2.SequencerDomainStateX {
	if x != nil {
		return x.Item
	}
	return nil
}

type ListPurgeTopologyTransactionXResult_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *BaseResult                   `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Item    *v2.PurgeTopologyTransactionX `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ListPurgeTopologyTransactionXResult_Result) Reset() {
	*x = ListPurgeTopologyTransactionXResult_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPurgeTopologyTransactionXResult_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPurgeTopologyTransactionXResult_Result) ProtoMessage() {}

func (x *ListPurgeTopologyTransactionXResult_Result) ProtoReflect() protoreflect.Message {
	mi := &file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPurgeTopologyTransactionXResult_Result.ProtoReflect.Descriptor instead.
func (*ListPurgeTopologyTransactionXResult_Result) Descriptor() ([]byte, []int) {
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP(), []int{31, 0}
}

func (x *ListPurgeTopologyTransactionXResult_Result) GetContext() *BaseResult {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ListPurgeTopologyTransactionXResult_Result) GetItem() *v2.PurgeTopologyTransactionX {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto protoreflect.FileDescriptor

var file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDesc = []byte{
	0x0a, 0x4d, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x32, 0x2f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xa7, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x62,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4d,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x8a, 0x05,
	0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x58, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x56, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x6d, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa3, 0x03, 0x0a, 0x0a, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x54, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x58, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0xe3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x4d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xa1,
	0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xd8, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xd7, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xaf, 0x02,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x97, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xbe, 0x02, 0x0a, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6c,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x52, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xab, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x71, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22,
	0xb2, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x68, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x58, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x64, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa3, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0xc6, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x68, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x4c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x90, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x22, 0x9d, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa0, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x9c, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0xbd, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0xac, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x9a, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb5, 0x02, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xa0, 0x01,
	0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0xc6, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x58, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x58, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x65, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x64, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x9e,
	0x17, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x58, 0x12, 0xae,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0xb1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x6f, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xc6, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x74, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x54, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x12, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xb4, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x58, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xa2, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x80, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x63, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x7a, 0x6c,
	0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x37, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescOnce sync.Once
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescData = file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDesc
)

func file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescGZIP() []byte {
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescOnce.Do(func() {
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescData)
	})
	return file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDescData
}

var file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_goTypes = []interface{}{
	(*ListTrafficStateRequest)(nil),                      // 0: com.digitalasset.canton.topology.admin.v1.ListTrafficStateRequest
	(*ListTrafficStateResult)(nil),                       // 1: com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult
	(*BaseQuery)(nil),                                    // 2: com.digitalasset.canton.topology.admin.v1.BaseQuery
	(*BaseResult)(nil),                                   // 3: com.digitalasset.canton.topology.admin.v1.BaseResult
	(*ListNamespaceDelegationRequest)(nil),               // 4: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationRequest
	(*ListNamespaceDelegationResult)(nil),                // 5: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult
	(*ListUnionspaceDefinitionRequest)(nil),              // 6: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionRequest
	(*ListUnionspaceDefinitionResult)(nil),               // 7: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult
	(*ListIdentifierDelegationRequest)(nil),              // 8: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationRequest
	(*ListIdentifierDelegationResult)(nil),               // 9: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult
	(*ListOwnerToKeyMappingRequest)(nil),                 // 10: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingRequest
	(*ListOwnerToKeyMappingResult)(nil),                  // 11: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult
	(*ListDomainTrustCertificateRequest)(nil),            // 12: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateRequest
	(*ListDomainTrustCertificateResult)(nil),             // 13: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult
	(*ListParticipantDomainPermissionRequest)(nil),       // 14: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionRequest
	(*ListParticipantDomainPermissionResult)(nil),        // 15: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult
	(*ListPartyHostingLimitsRequest)(nil),                // 16: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsRequest
	(*ListPartyHostingLimitsResult)(nil),                 // 17: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult
	(*ListVettedPackagesRequest)(nil),                    // 18: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesRequest
	(*ListVettedPackagesResult)(nil),                     // 19: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult
	(*ListPartyToParticipantRequest)(nil),                // 20: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantRequest
	(*ListPartyToParticipantResult)(nil),                 // 21: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult
	(*ListAuthorityOfRequest)(nil),                       // 22: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfRequest
	(*ListAuthorityOfResult)(nil),                        // 23: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult
	(*ListDomainParametersStateRequest)(nil),             // 24: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateRequest
	(*ListDomainParametersStateResult)(nil),              // 25: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult
	(*ListMediatorDomainStateRequest)(nil),               // 26: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateRequest
	(*ListMediatorDomainStateResult)(nil),                // 27: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult
	(*ListSequencerDomainStateRequest)(nil),              // 28: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateRequest
	(*ListSequencerDomainStateResult)(nil),               // 29: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult
	(*ListPurgeTopologyTransactionXRequest)(nil),         // 30: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXRequest
	(*ListPurgeTopologyTransactionXResult)(nil),          // 31: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult
	(*ListAvailableStoresRequest)(nil),                   // 32: com.digitalasset.canton.topology.admin.v1.ListAvailableStoresRequest
	(*ListAvailableStoresResult)(nil),                    // 33: com.digitalasset.canton.topology.admin.v1.ListAvailableStoresResult
	(*ListAllRequest)(nil),                               // 34: com.digitalasset.canton.topology.admin.v1.ListAllRequest
	(*ListAllResponse)(nil),                              // 35: com.digitalasset.canton.topology.admin.v1.ListAllResponse
	(*ListTrafficStateResult_Result)(nil),                // 36: com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult.Result
	(*BaseQuery_TimeRange)(nil),                          // 37: com.digitalasset.canton.topology.admin.v1.BaseQuery.TimeRange
	(*ListNamespaceDelegationResult_Result)(nil),         // 38: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult.Result
	(*ListUnionspaceDefinitionResult_Result)(nil),        // 39: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult.Result
	(*ListIdentifierDelegationResult_Result)(nil),        // 40: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult.Result
	(*ListOwnerToKeyMappingResult_Result)(nil),           // 41: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult.Result
	(*ListDomainTrustCertificateResult_Result)(nil),      // 42: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult.Result
	(*ListParticipantDomainPermissionResult_Result)(nil), // 43: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult.Result
	(*ListPartyHostingLimitsResult_Result)(nil),          // 44: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult.Result
	(*ListVettedPackagesResult_Result)(nil),              // 45: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult.Result
	(*ListPartyToParticipantResult_Result)(nil),          // 46: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult.Result
	(*ListAuthorityOfResult_Result)(nil),                 // 47: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult.Result
	(*ListDomainParametersStateResult_Result)(nil),       // 48: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult.Result
	(*ListMediatorDomainStateResult_Result)(nil),         // 49: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult.Result
	(*ListSequencerDomainStateResult_Result)(nil),        // 50: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult.Result
	(*ListPurgeTopologyTransactionXResult_Result)(nil),   // 51: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult.Result
	(v2.TopologyChangeOpX)(0),                            // 52: com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	(*timestamppb.Timestamp)(nil),                        // 53: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                                // 54: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),                       // 55: google.protobuf.StringValue
	(*v0.TopologyTransactions)(nil),                      // 56: com.digitalasset.canton.protocol.v0.TopologyTransactions
	(*v2.TrafficControlStateX)(nil),                      // 57: com.digitalasset.canton.protocol.v2.TrafficControlStateX
	(*v2.NamespaceDelegationX)(nil),                      // 58: com.digitalasset.canton.protocol.v2.NamespaceDelegationX
	(*v2.UnionspaceDefinitionX)(nil),                     // 59: com.digitalasset.canton.protocol.v2.UnionspaceDefinitionX
	(*v2.IdentifierDelegationX)(nil),                     // 60: com.digitalasset.canton.protocol.v2.IdentifierDelegationX
	(*v2.OwnerToKeyMappingX)(nil),                        // 61: com.digitalasset.canton.protocol.v2.OwnerToKeyMappingX
	(*v2.DomainTrustCertificateX)(nil),                   // 62: com.digitalasset.canton.protocol.v2.DomainTrustCertificateX
	(*v2.ParticipantDomainPermissionX)(nil),              // 63: com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX
	(*v2.PartyHostingLimitsX)(nil),                       // 64: com.digitalasset.canton.protocol.v2.PartyHostingLimitsX
	(*v2.VettedPackagesX)(nil),                           // 65: com.digitalasset.canton.protocol.v2.VettedPackagesX
	(*v2.PartyToParticipantX)(nil),                       // 66: com.digitalasset.canton.protocol.v2.PartyToParticipantX
	(*v2.AuthorityOfX)(nil),                              // 67: com.digitalasset.canton.protocol.v2.AuthorityOfX
	(*v2.DynamicDomainParametersX)(nil),                  // 68: com.digitalasset.canton.protocol.v2.DynamicDomainParametersX
	(*v2.MediatorDomainStateX)(nil),                      // 69: com.digitalasset.canton.protocol.v2.MediatorDomainStateX
	(*v2.SequencerDomainStateX)(nil),                     // 70: com.digitalasset.canton.protocol.v2.SequencerDomainStateX
	(*v2.PurgeTopologyTransactionX)(nil),                 // 71: com.digitalasset.canton.protocol.v2.PurgeTopologyTransactionX
}
var file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_depIdxs = []int32{
	2,  // 0: com.digitalasset.canton.topology.admin.v1.ListTrafficStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	36, // 1: com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult.Result
	52, // 2: com.digitalasset.canton.topology.admin.v1.BaseQuery.operation:type_name -> com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	53, // 3: com.digitalasset.canton.topology.admin.v1.BaseQuery.snapshot:type_name -> google.protobuf.Timestamp
	54, // 4: com.digitalasset.canton.topology.admin.v1.BaseQuery.head_state:type_name -> google.protobuf.Empty
	37, // 5: com.digitalasset.canton.topology.admin.v1.BaseQuery.range:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery.TimeRange
	55, // 6: com.digitalasset.canton.topology.admin.v1.BaseQuery.protocol_version:type_name -> google.protobuf.StringValue
	53, // 7: com.digitalasset.canton.topology.admin.v1.BaseResult.sequenced:type_name -> google.protobuf.Timestamp
	53, // 8: com.digitalasset.canton.topology.admin.v1.BaseResult.valid_from:type_name -> google.protobuf.Timestamp
	53, // 9: com.digitalasset.canton.topology.admin.v1.BaseResult.valid_until:type_name -> google.protobuf.Timestamp
	52, // 10: com.digitalasset.canton.topology.admin.v1.BaseResult.operation:type_name -> com.digitalasset.canton.protocol.v2.TopologyChangeOpX
	2,  // 11: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	38, // 12: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult.Result
	2,  // 13: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	39, // 14: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult.Result
	2,  // 15: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	40, // 16: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult.Result
	2,  // 17: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	41, // 18: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult.Result
	2,  // 19: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	42, // 20: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult.Result
	2,  // 21: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	43, // 22: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult.Result
	2,  // 23: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	44, // 24: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult.Result
	2,  // 25: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	45, // 26: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult.Result
	2,  // 27: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	46, // 28: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult.Result
	2,  // 29: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	47, // 30: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult.Result
	2,  // 31: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	48, // 32: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult.Result
	2,  // 33: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	49, // 34: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult.Result
	2,  // 35: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	50, // 36: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult.Result
	2,  // 37: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	51, // 38: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult.results:type_name -> com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult.Result
	2,  // 39: com.digitalasset.canton.topology.admin.v1.ListAllRequest.base_query:type_name -> com.digitalasset.canton.topology.admin.v1.BaseQuery
	56, // 40: com.digitalasset.canton.topology.admin.v1.ListAllResponse.result:type_name -> com.digitalasset.canton.protocol.v0.TopologyTransactions
	3,  // 41: com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	57, // 42: com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.TrafficControlStateX
	53, // 43: com.digitalasset.canton.topology.admin.v1.BaseQuery.TimeRange.from:type_name -> google.protobuf.Timestamp
	53, // 44: com.digitalasset.canton.topology.admin.v1.BaseQuery.TimeRange.until:type_name -> google.protobuf.Timestamp
	3,  // 45: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	58, // 46: com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.NamespaceDelegationX
	3,  // 47: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	59, // 48: com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.UnionspaceDefinitionX
	3,  // 49: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	60, // 50: com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.IdentifierDelegationX
	3,  // 51: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	61, // 52: com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.OwnerToKeyMappingX
	3,  // 53: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	62, // 54: com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.DomainTrustCertificateX
	3,  // 55: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	63, // 56: com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.ParticipantDomainPermissionX
	3,  // 57: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	64, // 58: com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.PartyHostingLimitsX
	3,  // 59: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	65, // 60: com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.VettedPackagesX
	3,  // 61: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	66, // 62: com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.PartyToParticipantX
	3,  // 63: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	67, // 64: com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.AuthorityOfX
	3,  // 65: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	68, // 66: com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.DynamicDomainParametersX
	3,  // 67: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	69, // 68: com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.MediatorDomainStateX
	3,  // 69: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	70, // 70: com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.SequencerDomainStateX
	3,  // 71: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult.Result.context:type_name -> com.digitalasset.canton.topology.admin.v1.BaseResult
	71, // 72: com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult.Result.item:type_name -> com.digitalasset.canton.protocol.v2.PurgeTopologyTransactionX
	4,  // 73: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListNamespaceDelegation:input_type -> com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationRequest
	6,  // 74: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListUnionspaceDefinition:input_type -> com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionRequest
	8,  // 75: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListIdentifierDelegation:input_type -> com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationRequest
	10, // 76: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListOwnerToKeyMapping:input_type -> com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingRequest
	12, // 77: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListDomainTrustCertificate:input_type -> com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateRequest
	14, // 78: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListParticipantDomainPermission:input_type -> com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionRequest
	16, // 79: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListPartyHostingLimits:input_type -> com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsRequest
	18, // 80: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListVettedPackages:input_type -> com.digitalasset.canton.topology.admin.v1.ListVettedPackagesRequest
	20, // 81: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListPartyToParticipant:input_type -> com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantRequest
	22, // 82: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListAuthorityOf:input_type -> com.digitalasset.canton.topology.admin.v1.ListAuthorityOfRequest
	24, // 83: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListDomainParametersState:input_type -> com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateRequest
	26, // 84: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListMediatorDomainState:input_type -> com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateRequest
	28, // 85: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListSequencerDomainState:input_type -> com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateRequest
	30, // 86: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListPurgeTopologyTransactionX:input_type -> com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXRequest
	32, // 87: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListAvailableStores:input_type -> com.digitalasset.canton.topology.admin.v1.ListAvailableStoresRequest
	34, // 88: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListAll:input_type -> com.digitalasset.canton.topology.admin.v1.ListAllRequest
	0,  // 89: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListTrafficState:input_type -> com.digitalasset.canton.topology.admin.v1.ListTrafficStateRequest
	5,  // 90: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListNamespaceDelegation:output_type -> com.digitalasset.canton.topology.admin.v1.ListNamespaceDelegationResult
	7,  // 91: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListUnionspaceDefinition:output_type -> com.digitalasset.canton.topology.admin.v1.ListUnionspaceDefinitionResult
	9,  // 92: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListIdentifierDelegation:output_type -> com.digitalasset.canton.topology.admin.v1.ListIdentifierDelegationResult
	11, // 93: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListOwnerToKeyMapping:output_type -> com.digitalasset.canton.topology.admin.v1.ListOwnerToKeyMappingResult
	13, // 94: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListDomainTrustCertificate:output_type -> com.digitalasset.canton.topology.admin.v1.ListDomainTrustCertificateResult
	15, // 95: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListParticipantDomainPermission:output_type -> com.digitalasset.canton.topology.admin.v1.ListParticipantDomainPermissionResult
	17, // 96: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListPartyHostingLimits:output_type -> com.digitalasset.canton.topology.admin.v1.ListPartyHostingLimitsResult
	19, // 97: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListVettedPackages:output_type -> com.digitalasset.canton.topology.admin.v1.ListVettedPackagesResult
	21, // 98: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListPartyToParticipant:output_type -> com.digitalasset.canton.topology.admin.v1.ListPartyToParticipantResult
	23, // 99: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListAuthorityOf:output_type -> com.digitalasset.canton.topology.admin.v1.ListAuthorityOfResult
	25, // 100: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListDomainParametersState:output_type -> com.digitalasset.canton.topology.admin.v1.ListDomainParametersStateResult
	27, // 101: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListMediatorDomainState:output_type -> com.digitalasset.canton.topology.admin.v1.ListMediatorDomainStateResult
	29, // 102: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListSequencerDomainState:output_type -> com.digitalasset.canton.topology.admin.v1.ListSequencerDomainStateResult
	31, // 103: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListPurgeTopologyTransactionX:output_type -> com.digitalasset.canton.topology.admin.v1.ListPurgeTopologyTransactionXResult
	33, // 104: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListAvailableStores:output_type -> com.digitalasset.canton.topology.admin.v1.ListAvailableStoresResult
	35, // 105: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListAll:output_type -> com.digitalasset.canton.topology.admin.v1.ListAllResponse
	1,  // 106: com.digitalasset.canton.topology.admin.v1.TopologyManagerReadServiceX.ListTrafficState:output_type -> com.digitalasset.canton.topology.admin.v1.ListTrafficStateResult
	90, // [90:107] is the sub-list for method output_type
	73, // [73:90] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() {
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_init()
}
func file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_init() {
	if File_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrafficStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrafficStateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceDelegationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceDelegationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionspaceDefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionspaceDefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIdentifierDelegationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIdentifierDelegationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnerToKeyMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnerToKeyMappingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainTrustCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainTrustCertificateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParticipantDomainPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParticipantDomainPermissionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartyHostingLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartyHostingLimitsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVettedPackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVettedPackagesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartyToParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartyToParticipantResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthorityOfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthorityOfResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainParametersStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainParametersStateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMediatorDomainStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMediatorDomainStateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSequencerDomainStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSequencerDomainStateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPurgeTopologyTransactionXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPurgeTopologyTransactionXResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableStoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableStoresResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrafficStateResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseQuery_TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespaceDelegationResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnionspaceDefinitionResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIdentifierDelegationResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnerToKeyMappingResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainTrustCertificateResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParticipantDomainPermissionResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartyHostingLimitsResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVettedPackagesResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPartyToParticipantResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthorityOfResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainParametersStateResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMediatorDomainStateResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSequencerDomainStateResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPurgeTopologyTransactionXResult_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*BaseQuery_Snapshot)(nil),
		(*BaseQuery_HeadState)(nil),
		(*BaseQuery_Range)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_goTypes,
		DependencyIndexes: file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_depIdxs,
		MessageInfos:      file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_msgTypes,
	}.Build()
	File_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto = out.File
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_rawDesc = nil
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_goTypes = nil
	file_com_digitalasset_canton_topology_admin_v1_topology_manager_read_service_proto_depIdxs = nil
}

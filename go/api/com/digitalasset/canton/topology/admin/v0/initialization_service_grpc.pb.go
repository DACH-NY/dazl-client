// Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: com/digitalasset/canton/topology/admin/v0/initialization_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InitializationServiceClient is the client API for InitializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitializationServiceClient interface {
	InitId(ctx context.Context, in *InitIdRequest, opts ...grpc.CallOption) (*InitIdResponse, error)
	GetId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIdResponse, error)
	CurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error)
}

type initializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInitializationServiceClient(cc grpc.ClientConnInterface) InitializationServiceClient {
	return &initializationServiceClient{cc}
}

func (c *initializationServiceClient) InitId(ctx context.Context, in *InitIdRequest, opts ...grpc.CallOption) (*InitIdResponse, error) {
	out := new(InitIdResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v0.InitializationService/InitId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializationServiceClient) GetId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIdResponse, error) {
	out := new(GetIdResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v0.InitializationService/GetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializationServiceClient) CurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*timestamppb.Timestamp, error) {
	out := new(timestamppb.Timestamp)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v0.InitializationService/CurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitializationServiceServer is the server API for InitializationService service.
// All implementations must embed UnimplementedInitializationServiceServer
// for forward compatibility
type InitializationServiceServer interface {
	InitId(context.Context, *InitIdRequest) (*InitIdResponse, error)
	GetId(context.Context, *emptypb.Empty) (*GetIdResponse, error)
	CurrentTime(context.Context, *emptypb.Empty) (*timestamppb.Timestamp, error)
	mustEmbedUnimplementedInitializationServiceServer()
}

// UnimplementedInitializationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInitializationServiceServer struct {
}

func (UnimplementedInitializationServiceServer) InitId(context.Context, *InitIdRequest) (*InitIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitId not implemented")
}
func (UnimplementedInitializationServiceServer) GetId(context.Context, *emptypb.Empty) (*GetIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedInitializationServiceServer) CurrentTime(context.Context, *emptypb.Empty) (*timestamppb.Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTime not implemented")
}
func (UnimplementedInitializationServiceServer) mustEmbedUnimplementedInitializationServiceServer() {}

// UnsafeInitializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitializationServiceServer will
// result in compilation errors.
type UnsafeInitializationServiceServer interface {
	mustEmbedUnimplementedInitializationServiceServer()
}

func RegisterInitializationServiceServer(s grpc.ServiceRegistrar, srv InitializationServiceServer) {
	s.RegisterService(&InitializationService_ServiceDesc, srv)
}

func _InitializationService_InitId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializationServiceServer).InitId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v0.InitializationService/InitId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializationServiceServer).InitId(ctx, req.(*InitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitializationService_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializationServiceServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v0.InitializationService/GetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializationServiceServer).GetId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InitializationService_CurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializationServiceServer).CurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v0.InitializationService/CurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializationServiceServer).CurrentTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InitializationService_ServiceDesc is the grpc.ServiceDesc for InitializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.topology.admin.v0.InitializationService",
	HandlerType: (*InitializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitId",
			Handler:    _InitializationService_InitId_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _InitializationService_GetId_Handler,
		},
		{
			MethodName: "CurrentTime",
			Handler:    _InitializationService_CurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/topology/admin/v0/initialization_service.proto",
}

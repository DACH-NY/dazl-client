// Copyright (c) 2017-2023 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: com/digitalasset/canton/topology/admin/v0/topology_aggregation_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopologyAggregationServiceClient is the client API for TopologyAggregationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyAggregationServiceClient interface {
	//*
	// Obtain information about a certain set of active parties matching a given filter criterion.
	//
	// The request allows to filter per (domain, party, asOf) where the domain and party argument are
	// used in order to filter the result list using the `startsWith` method on the respective resulting string.
	//
	// As such, if you just need to do a lookup, then define a precise filter. Given the uniqueness of the
	// identifiers (and the fact that the identifiers contain key fingerprints), we should only ever get a single
	// result back if we are doing a precise lookup.
	//
	// The response is a sequence of tuples (party, domain, participant, privilege, trust-level).
	// The response is restricted to active parties and their active participants.
	ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error)
	//*
	// Obtain key owner information matching a given filter criterion.
	//
	// Key owners in the system are different types of entities: Participant, Mediator, Domain Topology Manager and
	// Sequencer. The present method allows to define a filter to search for a key owner
	// using filters on (asOf, domain, ownerType, owner)
	//
	// The response is a sequence of (domain, ownerType, owner, keys) where keys is a sequence of
	// (fingerprint, bytes, key purpose). As such, we can use this method to export currently used signing or encryption
	// public keys.
	//
	// This method is quite general, as depending on the arguments, very different results can be obtained.
	//
	// Using OwnerType = 'Participant' allows to query for all participants.
	// Using OwnerType = 'Sequencer' allows to query for all sequencers defined.
	ListKeyOwners(ctx context.Context, in *ListKeyOwnersRequest, opts ...grpc.CallOption) (*ListKeyOwnersResponse, error)
}

type topologyAggregationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyAggregationServiceClient(cc grpc.ClientConnInterface) TopologyAggregationServiceClient {
	return &topologyAggregationServiceClient{cc}
}

func (c *topologyAggregationServiceClient) ListParties(ctx context.Context, in *ListPartiesRequest, opts ...grpc.CallOption) (*ListPartiesResponse, error) {
	out := new(ListPartiesResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v0.TopologyAggregationService/ListParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAggregationServiceClient) ListKeyOwners(ctx context.Context, in *ListKeyOwnersRequest, opts ...grpc.CallOption) (*ListKeyOwnersResponse, error) {
	out := new(ListKeyOwnersResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.topology.admin.v0.TopologyAggregationService/ListKeyOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyAggregationServiceServer is the server API for TopologyAggregationService service.
// All implementations must embed UnimplementedTopologyAggregationServiceServer
// for forward compatibility
type TopologyAggregationServiceServer interface {
	//*
	// Obtain information about a certain set of active parties matching a given filter criterion.
	//
	// The request allows to filter per (domain, party, asOf) where the domain and party argument are
	// used in order to filter the result list using the `startsWith` method on the respective resulting string.
	//
	// As such, if you just need to do a lookup, then define a precise filter. Given the uniqueness of the
	// identifiers (and the fact that the identifiers contain key fingerprints), we should only ever get a single
	// result back if we are doing a precise lookup.
	//
	// The response is a sequence of tuples (party, domain, participant, privilege, trust-level).
	// The response is restricted to active parties and their active participants.
	ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error)
	//*
	// Obtain key owner information matching a given filter criterion.
	//
	// Key owners in the system are different types of entities: Participant, Mediator, Domain Topology Manager and
	// Sequencer. The present method allows to define a filter to search for a key owner
	// using filters on (asOf, domain, ownerType, owner)
	//
	// The response is a sequence of (domain, ownerType, owner, keys) where keys is a sequence of
	// (fingerprint, bytes, key purpose). As such, we can use this method to export currently used signing or encryption
	// public keys.
	//
	// This method is quite general, as depending on the arguments, very different results can be obtained.
	//
	// Using OwnerType = 'Participant' allows to query for all participants.
	// Using OwnerType = 'Sequencer' allows to query for all sequencers defined.
	ListKeyOwners(context.Context, *ListKeyOwnersRequest) (*ListKeyOwnersResponse, error)
	mustEmbedUnimplementedTopologyAggregationServiceServer()
}

// UnimplementedTopologyAggregationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTopologyAggregationServiceServer struct {
}

func (UnimplementedTopologyAggregationServiceServer) ListParties(context.Context, *ListPartiesRequest) (*ListPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParties not implemented")
}
func (UnimplementedTopologyAggregationServiceServer) ListKeyOwners(context.Context, *ListKeyOwnersRequest) (*ListKeyOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyOwners not implemented")
}
func (UnimplementedTopologyAggregationServiceServer) mustEmbedUnimplementedTopologyAggregationServiceServer() {
}

// UnsafeTopologyAggregationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyAggregationServiceServer will
// result in compilation errors.
type UnsafeTopologyAggregationServiceServer interface {
	mustEmbedUnimplementedTopologyAggregationServiceServer()
}

func RegisterTopologyAggregationServiceServer(s grpc.ServiceRegistrar, srv TopologyAggregationServiceServer) {
	s.RegisterService(&TopologyAggregationService_ServiceDesc, srv)
}

func _TopologyAggregationService_ListParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAggregationServiceServer).ListParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v0.TopologyAggregationService/ListParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAggregationServiceServer).ListParties(ctx, req.(*ListPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAggregationService_ListKeyOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAggregationServiceServer).ListKeyOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.topology.admin.v0.TopologyAggregationService/ListKeyOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAggregationServiceServer).ListKeyOwners(ctx, req.(*ListKeyOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopologyAggregationService_ServiceDesc is the grpc.ServiceDesc for TopologyAggregationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyAggregationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.topology.admin.v0.TopologyAggregationService",
	HandlerType: (*TopologyAggregationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListParties",
			Handler:    _TopologyAggregationService_ListParties_Handler,
		},
		{
			MethodName: "ListKeyOwners",
			Handler:    _TopologyAggregationService_ListKeyOwners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/topology/admin/v0/topology_aggregation_service.proto",
}

// Copyright (c) 2017-2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: com/digitalasset/canton/participant/admin/v0/package_service.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageServiceClient interface {
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	ListPackageContents(ctx context.Context, in *ListPackageContentsRequest, opts ...grpc.CallOption) (*ListPackageContentsResponse, error)
	ListDars(ctx context.Context, in *ListDarsRequest, opts ...grpc.CallOption) (*ListDarsResponse, error)
	ListDarContents(ctx context.Context, in *ListDarContentsRequest, opts ...grpc.CallOption) (*ListDarContentsResponse, error)
	UploadDar(ctx context.Context, in *UploadDarRequest, opts ...grpc.CallOption) (*UploadDarResponse, error)
	ValidateDar(ctx context.Context, in *ValidateDarRequest, opts ...grpc.CallOption) (*ValidateDarResponse, error)
	RemovePackage(ctx context.Context, in *RemovePackageRequest, opts ...grpc.CallOption) (*RemovePackageResponse, error)
	VetDar(ctx context.Context, in *VetDarRequest, opts ...grpc.CallOption) (*VetDarResponse, error)
	UnvetDar(ctx context.Context, in *UnvetDarRequest, opts ...grpc.CallOption) (*UnvetDarResponse, error)
	RemoveDar(ctx context.Context, in *RemoveDarRequest, opts ...grpc.CallOption) (*RemoveDarResponse, error)
	GetDar(ctx context.Context, in *GetDarRequest, opts ...grpc.CallOption) (*GetDarResponse, error)
}

type packageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageServiceClient(cc grpc.ClientConnInterface) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) ListPackageContents(ctx context.Context, in *ListPackageContentsRequest, opts ...grpc.CallOption) (*ListPackageContentsResponse, error) {
	out := new(ListPackageContentsResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/ListPackageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) ListDars(ctx context.Context, in *ListDarsRequest, opts ...grpc.CallOption) (*ListDarsResponse, error) {
	out := new(ListDarsResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/ListDars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) ListDarContents(ctx context.Context, in *ListDarContentsRequest, opts ...grpc.CallOption) (*ListDarContentsResponse, error) {
	out := new(ListDarContentsResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/ListDarContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UploadDar(ctx context.Context, in *UploadDarRequest, opts ...grpc.CallOption) (*UploadDarResponse, error) {
	out := new(UploadDarResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/UploadDar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) ValidateDar(ctx context.Context, in *ValidateDarRequest, opts ...grpc.CallOption) (*ValidateDarResponse, error) {
	out := new(ValidateDarResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/ValidateDar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) RemovePackage(ctx context.Context, in *RemovePackageRequest, opts ...grpc.CallOption) (*RemovePackageResponse, error) {
	out := new(RemovePackageResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/RemovePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) VetDar(ctx context.Context, in *VetDarRequest, opts ...grpc.CallOption) (*VetDarResponse, error) {
	out := new(VetDarResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/VetDar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UnvetDar(ctx context.Context, in *UnvetDarRequest, opts ...grpc.CallOption) (*UnvetDarResponse, error) {
	out := new(UnvetDarResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/UnvetDar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) RemoveDar(ctx context.Context, in *RemoveDarRequest, opts ...grpc.CallOption) (*RemoveDarResponse, error) {
	out := new(RemoveDarResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/RemoveDar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetDar(ctx context.Context, in *GetDarRequest, opts ...grpc.CallOption) (*GetDarResponse, error) {
	out := new(GetDarResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.canton.participant.admin.v0.PackageService/GetDar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceServer is the server API for PackageService service.
// All implementations must embed UnimplementedPackageServiceServer
// for forward compatibility
type PackageServiceServer interface {
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	ListPackageContents(context.Context, *ListPackageContentsRequest) (*ListPackageContentsResponse, error)
	ListDars(context.Context, *ListDarsRequest) (*ListDarsResponse, error)
	ListDarContents(context.Context, *ListDarContentsRequest) (*ListDarContentsResponse, error)
	UploadDar(context.Context, *UploadDarRequest) (*UploadDarResponse, error)
	ValidateDar(context.Context, *ValidateDarRequest) (*ValidateDarResponse, error)
	RemovePackage(context.Context, *RemovePackageRequest) (*RemovePackageResponse, error)
	VetDar(context.Context, *VetDarRequest) (*VetDarResponse, error)
	UnvetDar(context.Context, *UnvetDarRequest) (*UnvetDarResponse, error)
	RemoveDar(context.Context, *RemoveDarRequest) (*RemoveDarResponse, error)
	GetDar(context.Context, *GetDarRequest) (*GetDarResponse, error)
	mustEmbedUnimplementedPackageServiceServer()
}

// UnimplementedPackageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackageServiceServer struct {
}

func (UnimplementedPackageServiceServer) ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedPackageServiceServer) ListPackageContents(context.Context, *ListPackageContentsRequest) (*ListPackageContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackageContents not implemented")
}
func (UnimplementedPackageServiceServer) ListDars(context.Context, *ListDarsRequest) (*ListDarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDars not implemented")
}
func (UnimplementedPackageServiceServer) ListDarContents(context.Context, *ListDarContentsRequest) (*ListDarContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDarContents not implemented")
}
func (UnimplementedPackageServiceServer) UploadDar(context.Context, *UploadDarRequest) (*UploadDarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDar not implemented")
}
func (UnimplementedPackageServiceServer) ValidateDar(context.Context, *ValidateDarRequest) (*ValidateDarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDar not implemented")
}
func (UnimplementedPackageServiceServer) RemovePackage(context.Context, *RemovePackageRequest) (*RemovePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackage not implemented")
}
func (UnimplementedPackageServiceServer) VetDar(context.Context, *VetDarRequest) (*VetDarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VetDar not implemented")
}
func (UnimplementedPackageServiceServer) UnvetDar(context.Context, *UnvetDarRequest) (*UnvetDarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnvetDar not implemented")
}
func (UnimplementedPackageServiceServer) RemoveDar(context.Context, *RemoveDarRequest) (*RemoveDarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDar not implemented")
}
func (UnimplementedPackageServiceServer) GetDar(context.Context, *GetDarRequest) (*GetDarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDar not implemented")
}
func (UnimplementedPackageServiceServer) mustEmbedUnimplementedPackageServiceServer() {}

// UnsafePackageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageServiceServer will
// result in compilation errors.
type UnsafePackageServiceServer interface {
	mustEmbedUnimplementedPackageServiceServer()
}

func RegisterPackageServiceServer(s grpc.ServiceRegistrar, srv PackageServiceServer) {
	s.RegisterService(&PackageService_ServiceDesc, srv)
}

func _PackageService_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_ListPackageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackageContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListPackageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/ListPackageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListPackageContents(ctx, req.(*ListPackageContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_ListDars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListDars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/ListDars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListDars(ctx, req.(*ListDarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_ListDarContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDarContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListDarContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/ListDarContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListDarContents(ctx, req.(*ListDarContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UploadDar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UploadDar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/UploadDar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UploadDar(ctx, req.(*UploadDarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_ValidateDar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ValidateDar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/ValidateDar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ValidateDar(ctx, req.(*ValidateDarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/RemovePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).RemovePackage(ctx, req.(*RemovePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_VetDar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VetDarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).VetDar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/VetDar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).VetDar(ctx, req.(*VetDarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UnvetDar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnvetDarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UnvetDar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/UnvetDar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UnvetDar(ctx, req.(*UnvetDarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_RemoveDar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).RemoveDar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/RemoveDar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).RemoveDar(ctx, req.(*RemoveDarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetDar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetDar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.canton.participant.admin.v0.PackageService/GetDar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetDar(ctx, req.(*GetDarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageService_ServiceDesc is the grpc.ServiceDesc for PackageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.canton.participant.admin.v0.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPackages",
			Handler:    _PackageService_ListPackages_Handler,
		},
		{
			MethodName: "ListPackageContents",
			Handler:    _PackageService_ListPackageContents_Handler,
		},
		{
			MethodName: "ListDars",
			Handler:    _PackageService_ListDars_Handler,
		},
		{
			MethodName: "ListDarContents",
			Handler:    _PackageService_ListDarContents_Handler,
		},
		{
			MethodName: "UploadDar",
			Handler:    _PackageService_UploadDar_Handler,
		},
		{
			MethodName: "ValidateDar",
			Handler:    _PackageService_ValidateDar_Handler,
		},
		{
			MethodName: "RemovePackage",
			Handler:    _PackageService_RemovePackage_Handler,
		},
		{
			MethodName: "VetDar",
			Handler:    _PackageService_VetDar_Handler,
		},
		{
			MethodName: "UnvetDar",
			Handler:    _PackageService_UnvetDar_Handler,
		},
		{
			MethodName: "RemoveDar",
			Handler:    _PackageService_RemoveDar_Handler,
		},
		{
			MethodName: "GetDar",
			Handler:    _PackageService_GetDar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/canton/participant/admin/v0/package_service.proto",
}

# Copyright (c) 2017-2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off

import typing as _typing

from grpc import Channel as __Channel
from grpc.aio import Channel as __AsyncChannel

from .transaction_service_pb2 import (
    GetFlatTransactionResponse,
    GetLedgerEndRequest,
    GetLedgerEndResponse,
    GetTransactionByEventIdRequest,
    GetTransactionByIdRequest,
    GetTransactionsRequest,
    GetTransactionsResponse,
    GetTransactionTreesResponse,
)

__all__ = [
    "TransactionServiceStub"
]

# noinspection PyPep8Naming
class TransactionServiceStub:
    @classmethod
    @_typing.overload
    def __new__(cls, channel: __Channel) -> _TransactionServiceStub: ...
    @classmethod
    @_typing.overload
    def __new__(cls, channel: __AsyncChannel) -> _TransactionServiceStub_Async: ...
    def GetTransactions(self, __1: GetTransactionsRequest) -> _typing.Union[_typing.Iterable[GetTransactionsResponse], _typing.AsyncIterable[GetTransactionsResponse]]: ...
    def GetTransactionTrees(self, __1: GetTransactionsRequest) -> _typing.Union[_typing.Iterable[GetTransactionTreesResponse], _typing.AsyncIterable[GetTransactionTreesResponse]]: ...
    def GetTransactionByEventId(self, __1: GetTransactionByEventIdRequest) -> _typing.Union[GetTransactionsResponse, _typing.Awaitable[GetTransactionsResponse]]: ...
    def GetTransactionById(self, __1: GetTransactionByIdRequest) -> _typing.Union[GetTransactionsResponse, _typing.Awaitable[GetTransactionsResponse]]: ...
    def GetFlatTransactionByEventId(self, __1: GetTransactionByEventIdRequest) -> _typing.Union[GetFlatTransactionResponse, _typing.Awaitable[GetFlatTransactionResponse]]: ...
    def GetFlatTransactionById(self, __1: GetTransactionByIdRequest) -> _typing.Union[GetFlatTransactionResponse, _typing.Awaitable[GetFlatTransactionResponse]]: ...
    def GetLedgerEnd(self, __1: GetLedgerEndRequest) -> _typing.Union[GetLedgerEndResponse, _typing.Awaitable[GetLedgerEndResponse]]: ...

class _TransactionServiceStub(TransactionServiceStub):
    def GetTransactions(self, __1: GetTransactionsRequest) -> _typing.Iterable[GetTransactionsResponse]: ...
    def GetTransactionTrees(self, __1: GetTransactionsRequest) -> _typing.Iterable[GetTransactionTreesResponse]: ...
    def GetTransactionByEventId(self, __1: GetTransactionByEventIdRequest) -> GetTransactionsResponse: ...
    def GetTransactionById(self, __1: GetTransactionByIdRequest) -> GetTransactionsResponse: ...
    def GetFlatTransactionByEventId(self, __1: GetTransactionByEventIdRequest) -> GetFlatTransactionResponse: ...
    def GetFlatTransactionById(self, __1: GetTransactionByIdRequest) -> GetFlatTransactionResponse: ...
    def GetLedgerEnd(self, __1: GetLedgerEndRequest) -> GetLedgerEndResponse: ...

class _TransactionServiceStub_Async(TransactionServiceStub):
    def GetTransactions(self, __1: GetTransactionsRequest) -> _typing.AsyncIterable[GetTransactionsResponse]: ...
    def GetTransactionTrees(self, __1: GetTransactionsRequest) -> _typing.AsyncIterable[GetTransactionTreesResponse]: ...
    def GetTransactionByEventId(self, __1: GetTransactionByEventIdRequest) -> _typing.Awaitable[GetTransactionsResponse]: ...
    def GetTransactionById(self, __1: GetTransactionByIdRequest) -> _typing.Awaitable[GetTransactionsResponse]: ...
    def GetFlatTransactionByEventId(self, __1: GetTransactionByEventIdRequest) -> _typing.Awaitable[GetFlatTransactionResponse]: ...
    def GetFlatTransactionById(self, __1: GetTransactionByIdRequest) -> _typing.Awaitable[GetFlatTransactionResponse]: ...
    def GetLedgerEnd(self, __1: GetLedgerEndRequest) -> _typing.Awaitable[GetLedgerEndResponse]: ...

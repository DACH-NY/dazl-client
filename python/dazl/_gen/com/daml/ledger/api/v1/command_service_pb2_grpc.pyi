# Copyright (c) 2017-2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
# fmt: off

import typing as _typing

from google.protobuf.empty_pb2 import Empty
from grpc import Channel as __Channel
from grpc.aio import Channel as __AsyncChannel

from .command_service_pb2 import (
    SubmitAndWaitForTransactionIdResponse,
    SubmitAndWaitForTransactionResponse,
    SubmitAndWaitForTransactionTreeResponse,
    SubmitAndWaitRequest,
)

__all__ = [
    "CommandServiceStub",
]

class CommandServiceStub:
    @classmethod
    @_typing.overload
    def __new__(cls, channel: __Channel) -> _CommandSubmissionServiceStub: ...
    @classmethod
    @_typing.overload
    def __new__(cls, channel: __AsyncChannel) -> _CommandSubmissionServiceStub_Async: ...
    def SubmitAndWait(self, __1: SubmitAndWaitRequest) -> _typing.Union[Empty, _typing.Awaitable[Empty]]: ...
    def SubmitAndWaitForTransactionId(self, __1: SubmitAndWaitRequest) -> _typing.Union[SubmitAndWaitForTransactionIdResponse, _typing.Awaitable[SubmitAndWaitForTransactionIdResponse]]: ...
    def SubmitAndWaitForTransaction(self, __1: SubmitAndWaitRequest) -> _typing.Union[SubmitAndWaitForTransactionResponse, _typing.Awaitable[SubmitAndWaitForTransactionResponse]]: ...
    def SubmitAndWaitForTransactionTree(self, __1: SubmitAndWaitRequest) -> _typing.Union[SubmitAndWaitForTransactionTreeResponse, _typing.Awaitable[SubmitAndWaitForTransactionTreeResponse]]: ...

class _CommandSubmissionServiceStub(CommandServiceStub):
    def SubmitAndWait(self, __1: SubmitAndWaitRequest) -> Empty: ...
    def SubmitAndWaitForTransactionId(self, __1: SubmitAndWaitRequest) -> SubmitAndWaitForTransactionIdResponse: ...
    def SubmitAndWaitForTransaction(self, __1: SubmitAndWaitRequest) -> SubmitAndWaitForTransactionResponse: ...
    def SubmitAndWaitForTransactionTree(self, __1: SubmitAndWaitRequest) -> SubmitAndWaitForTransactionTreeResponse: ...

class _CommandSubmissionServiceStub_Async(CommandServiceStub):
    def SubmitAndWait(self, __1: SubmitAndWaitRequest) -> _typing.Awaitable[Empty]: ...
    def SubmitAndWaitForTransactionId(self, __1: SubmitAndWaitRequest) -> _typing.Awaitable[SubmitAndWaitForTransactionIdResponse]: ...
    def SubmitAndWaitForTransaction(self, __1: SubmitAndWaitRequest) -> _typing.Awaitable[SubmitAndWaitForTransactionResponse]: ...
    def SubmitAndWaitForTransactionTree(self, __1: SubmitAndWaitRequest) -> _typing.Awaitable[SubmitAndWaitForTransactionTreeResponse]: ...
